/*
 * JavaScript Templates 2.1.0
 * https://github.com/blueimp/JavaScript-Templates
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 *
 * Inspired by John Resig's JavaScript Micro-Templating:
 * http://ejohn.org/blog/javascript-micro-templating/
 */

/*jslint evil: true, regexp: true */
/*global document, define */

(function ($) {
    "use strict";
    var tmpl = function (str, data, nocache) {
        var f = !/[^\w\-\.:]/.test(str) ?
            ( !nocache ?
                    (tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str))) :
                        tmpl.cache[str] = tmpl(tmpl.load(str))
            ) :
            new Function(
                tmpl.arg + ',tmpl',
                "var _e=tmpl.encode" + tmpl.helper + ",_s='" +
                    str.replace(tmpl.regexp, tmpl.func) +
                    "';return _s;"
            );
        return data ? f(data, tmpl) : function (data) {
            return f(data, tmpl);
        };
    };
    tmpl.cache = {};
    tmpl.load = function (id) {
        var e = document.getElementById(id),
            pattern = /<\\\/(\w+)/g,
            replace = '<'+'/$1';
        if(!e && console) {
            throw { message: 'template with id='+id+' not found' };
        }
        return e?(e.tagName.toLowerCase() == 'textarea' ? e.value: document.getElementById(id).innerHTML).replace(pattern, replace):null;
    };
    tmpl.regexp = /([\s'\\])(?![^%]*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g;
    tmpl.func = function (s, p1, p2, p3, p4, p5) {
        if (p1) { // whitespace, quote and backspace in interpolation context
            return {
                "\n": "\\n",
                "\r": "\\r",
                "\t": "\\t",
                " " : " "
            }[s] || "\\" + s;
        }
        if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}
            if (p2 === "=") {
                return "'+_e(" + p3 + ")+'";
            }
            return "'+(" + p3 + "||'')+'";
        }
        if (p4) { // evaluation start tag: {%
            return "';";
        }
        if (p5) { // evaluation end tag: %}
            return "_s+='";
        }
    };
    tmpl.encReg = /[<>&"'\x00]/g;
    tmpl.encMap = {
        "<"   : "&lt;",
        ">"   : "&gt;",
        "&"   : "&amp;",
        "\""  : "&quot;",
        "'"   : "&#39;"
    };
    tmpl.encode = function (s) {
        return String(s || "").replace(
            tmpl.encReg,
            function (c) {
                return tmpl.encMap[c] || "";
            }
        );
    };
    tmpl.arg = "o";
    tmpl.helper = ",print=function(s,e){_s+=e&&(s||'')||_e(s);}" +
        ",include=function(s,d){_s+=tmpl(s,d);}";
    if (typeof define === "function" && define.amd) {
        define(function () {
            return tmpl;
        });
    } else {
        $.tmpl = tmpl;
    }
}(this));;
(function($) {

    $.fn.lazyLoad = function(options, ext) {

        if (options == 'stop') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.stopped = true;
            }
            return;
        }

        if (options == 'sleep') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = true;
            }
            return;
        }

        if (options == 'wake') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = false;
            }
            return;
        }

        if (options == 'force') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                if (!settings.loading) {
                    settings.load();
                }
            }
            return;
        }

        this.data('lazyLoadSettings', $.extend({
            distance: 50,
            load: function() {},
            container: container,
            state: 'wake',
            hash: location.hash.replace(/^[^#]*#\/*/, '').split('/')[0] || null,
            distanceBetweenBottoms: null
        }, options || {}));

        var settings = this.data('lazyLoadSettings');
        settings.loading = false;
        settings.stopped = false;

        var win = this;
        var container = typeof settings.container === 'string' ? $(settings.container) : settings.container;

        init();

        function init()
        {
            if (settings.hash !== null) {
                if (!$.isArray(settings.hash)) {
                    settings.hash = [settings.hash];
                }
            }
            $.fn.lazyLoad.call(win, settings.state);
            initHandler();
        }

        function scrollHandler()
        {
            if (settings.stopped) {
                this.onscroll = null;
                return;
            }
            if (!settings.stopped && !settings.loading && distanceBetweenBottoms(container, win) <= settings.distance) {
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        this.onscroll = null;
                        return;
                    }
                }
                settings.load();
            }
        }

        function initHandler()
        {
            var interval = 350;
            var timerId = setTimeout(function() {
                if (settings.stopped) {
                    clearTimeout(timerId);
                    return;
                }
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        clearTimeout(timerId);
                        return;
                    }
                }
                if (!settings.loading) {
                    var r = distanceBetweenBottoms(container, win);
                    if (distanceBetweenBottoms(container, win) <= settings.distance) {
                        settings.load();
                        timerId = setTimeout(arguments.callee, interval);
                    } else {
                        win.get(0).onscroll = scrollHandler;
                        clearTimeout(timerId);
                    }
                } else {
                    timerId = setTimeout(arguments.callee, interval);
                }
            }, interval);
        }

        var distanceBetweenBottoms = typeof settings.distanceBetweenBottoms === 'function' ?
            settings.distanceBetweenBottoms :
            function (container, win, offset) {
                offset = offset || 0;
                return (container.position().top + container.outerHeight() - offset) - (win.scrollTop() + win.height());
            };
    };
})(jQuery);
;
//live draggable and live droppable


$.fn.liveDraggable = function (opts) {
    this.each(function(i,el) {
        var self = $(this);
        if (self.data('init_draggable')) {
            self.die("mouseover", self.data('init_draggable'));
        }
    });
    this.die("mouseover").live("mouseover", function() {
        var self = $(this);
        if (!self.data("init_draggable")) {
            self.data("init_draggable", arguments.callee).draggable(opts);
        }
    });
};
$.fn.liveDroppable = function (opts) {
    this.each(function(i,el) {
        var self = $(this);
        if (self.data('init_droppable')) {
            self.die("mouseover", self.data('init_droppable'));
        }
    });
    var init = function() {
        var self = $(this);
        if (!self.data("init_droppable")) {
            self.data("init_droppable", arguments.callee).droppable(opts);
            self.mouseover();
        }
    };
    init.call(this);
    this.die("mouseover", init).live("mouseover", init);
};;
(function($) {
    $.fn.inlineEditable = function(options, ext)
    {
        if (!this.length) {
            return;
        }
        var binded = false;

        if (typeof options == 'string') {
            if (options == 'setOption') {
                var settings = this.data('inlineEditableSettings') || {};
                $.extend(true, settings, ext);
                if (typeof ext.hold !== 'undefined' && typeof ext.hold !== 'function') {
                    settings.hold = _scalarToFunc(settings.hold);
                }
                this.data('inlineEditableSettings', settings);
            }
            return this;        // means that widget is installed already
        }

        var prev_settings = this.data('inlineEditableSettings');   // prev-old settings
        this.data('inlineEditableSettings', $.extend({
            inputType: 'text',
            inputClass: '',
            size: {
                height: null,
                width: null
            },
            minSize: {
                height: null,
                width: null
            },
            maxSize: {
                height: null,
                width: null
            },
            editLink: null,
            editOnItself: true,
            placeholder: null,
            makeReadableBy: ['blur', 'enter', 'esc'],        // available 'blur', 'enter', 'esc', function
            updateBy: ['ctrl+enter','alt+enter'],
            beforeBackReadable: function() {},
            afterBackReadable: function() {},
            beforeMakeEditable: function() {},
            afterMakeEditable: function() {},
            placeholderClass: 'hint',
            truncate: false,
            hold: false,
            html: false,
            allowEmpty: false
        }, prev_settings, options || {}));

        var settings = this.data('inlineEditableSettings')||{},
            self = this,
            mode = 'read',                            // read|edit
            text = '';                                // previous text

        if (typeof settings.hold !== 'function') {
            settings.hold = _scalarToFunc(settings.hold);
        }
        init.call(this);

        function init() {
            if (this.data('inited')) {    // has initialized already. Don't initialize again
                return;
            }
            if (settings.truncate && typeof settings.truncate == 'boolean') {
                settings.truncate = 255; // default value of truncate
            }
            if (settings.truncate) {
                var text = !settings.placeholder || settings.placeholder !== this.text() ? this.text() : '';
                this.data('real_text', text);       // here real text. Non truncated text
                this.text(text.length < settings.truncate - 3 ? text : text.substr(0, settings.truncate - 3) + '...');
            }
            if (settings.placeholder) {
                setPlaceholder.call(this);
            }
            if (settings.editLink) {
                $(settings.editLink).unbind('click.inlineEditable').bind('click.inlineEditable', function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (mode != 'edit') {
                        makeEditable.call(self.get(0));
                    }
                });
            }
            if (settings.editOnItself) {
                this.unbind('click.inlineEditable').bind('click.inlineEditable', function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (mode != 'edit') {
                        makeEditable.call(this);
                    }
                });
            }
            this.unbind('editable.inlineEditable').bind('editable.inlineEditable', function() {
                if (settings.hold.call(self)) {
                    return;
                }
                if (mode != 'edit') {
                    makeEditable.call(this);
                }
            });
            this.unbind('placeholder.inlineEditable').bind('placeholder.inlineEditable', function(e, s) {
                if (s && settings.placeholder) {
                    setPlaceholder.call(this);
                }
                if (!s) {
                    $(this).removeClass(settings.placeholderClass);
                }
            });
            this.data('inited', true);
        }

        function setPlaceholder()
        {
            var text = getText($(this));
            if (!text) {
                $(this).addClass(settings.placeholderClass).text(settings.placeholder);
            }
        }

        function unsetPlaceholder()
        {
            var text = getText($(this));
            if (text == settings.placeholder) {
                $(this).text('').removeClass(settings.placeholderClass);
            }
        }

        function backPlaceholder(input)
        {
            if (!$(input).val()) {
                $(this).text(settings.placeholder).addClass(settings.placeholderClass);
                return true;
            }
            return false;
        }

        function makeEditable()
        {
            mode = 'edit';
            this.id = this.id || ('' + Math.random()).slice(2);

            var input_id = this.id + '-input',
                input = $('#' + input_id);

            if (!input.length) {
                self.after(inputHtml(input_id));
                input = $('#' + input_id);
            }
            input.addClass(settings.inputClass);
            setSize(input, self);
            if (settings.placeholder) {
                if (getText($(this)) == settings.placeholder) {
                    unsetPlaceholder.call(self);
                }
            }

            // fire before-callback
            settings.beforeMakeEditable.call(this, input);

            text = settings.truncate ? self.data('real_text') : getText(self);      // save text - for restoring if need
            input.val(text).show().focus();
            self.hide();
            $(settings.editLink).hide();

            if (!binded) {        // bind event handler only once
                var key_codes = [];
                var save_key_codes = [];
                for (var i = 0, n = settings.makeReadableBy.length; i < n; ++i) {
                    var item = settings.makeReadableBy[i];
                    if (item == 'blur') {
                        input.blur(function() {
                            if (mode != 'read') {
                                makeReadable.call(this);
                            }
                        });
                    }
                    if (item == 'enter') {
                        key_codes.push(13);
                    }
                    if (item == 'esc') {
                        key_codes.push(27);
                    }
                }
                for (var i = 0, n = settings.updateBy.length; i < n; ++i) {
                    var item = settings.updateBy[i];
                    if (item == 'alt+enter') {
                        save_key_codes.push({'ctrl':false,'alt':true,'shift':false,'key':13});
                    }
                    if (item == 'ctrl+enter') {
                        save_key_codes.push({'ctrl':true,'alt':false,'shift':false,'key':13});
                    }
                    if (item == 'ctrl+s') {
                        save_key_codes.push({'ctrl':true,'alt':false,'shift':false,'key':17});
                    }
                }
                if (key_codes.length) {
                    (function(key_codes) {
                        input.keydown(function(e) {
                            if (~key_codes.indexOf(e.keyCode) && !e.ctrlKey && !e.altKey && !e.shiftKey) {
                                if (mode != 'read') {
                                    makeReadable.call(this, e.keyCode == 27 ? text : null);
                                }
                            }
                            if(save_key_codes.length) {
                                for(var i in save_key_codes) {
                                    var k = save_key_codes[i];
                                    if ((e.keyCode == k.key) && (e.ctrlKey == k.ctrl) && (e.altKey == k.alt) && (e.shiftKey == k.shift) ){
                                        self.trigger('readable');
                                        break;
                                    }
                                }
                            }
                        });
                    })(key_codes);
                }
                self.unbind('readable.inlineEditable').bind('readable.inlineEditable', function(e, disable_handlers) {
                    if (mode != 'read') {
                        var input_id = this.id + '-input';
                        var input = $('#' + input_id);
                        makeReadable.call(input, input.val(), disable_handlers);
                    }
                });
                binded = true;
            }

            settings.afterMakeEditable.call(this, input);

        }

        function makeReadable(new_text, disable_handlers)
        {
            disable_handlers = typeof disable_handlers === 'undefined' ? false : true;
            if (new_text != undefined && new_text != null) {
                $(this).val(new_text);
            } else {
                new_text = $(this).val();
            }
            if (disable_handlers === false) {
                if (settings.beforeBackReadable.call(self.get(0), this, {
                    changed: new_text != text,
                    old_text: text,
                    new_text: new_text
                }) === false)
                {
                    return;
                }
            }
            mode = 'read';
            // this - input
            if (!settings.placeholder || !backPlaceholder.call(self, this)) {
                if (settings.allowEmpty || new_text) {
                    if (settings.truncate) {
                        self.data('real_text', new_text);       // here real text. Non truncated text
                        self.text(new_text.length < settings.truncate - 3 ? new_text : new_text.substr(0, settings.truncate - 3) + '...' );
                    } else {
                        setText(self, new_text);
                    }
                    if (!new_text) {
                        setPlaceholder.call(this);
                    }
                }
            }
            self.show();
            $(this).hide();
            $(settings.editLink).show();
            // fire after-callback
            if (disable_handlers === false) {
                settings.afterBackReadable.call(self.get(0), this, {
                   changed: new_text != text,
                   old_text: text
                });
            }
        }

        function inputHtml(id)
        {
            switch (settings.inputType) {
                case 'textarea':
                    return '<textarea id="' + id + '" style="display:none;"></textarea>';
                case 'input':
                default:
                    return '<input type="text" id="' + id + '" style="display:none;">';
            }
        }

        function setSize(dst, src)
        {
            var height = settings.size.height || src.height(),
                width = settings.size.width || src.width() * 1.5;

            height = settings.minSize.height && height < settings.minSize.height ? settings.minSize.height : height;
            width = settings.minSize.width && width < settings.minSize.width ? settings.minSize.width : width;

            height = settings.maxSize.height && height > settings.maxSize.height ? settings.maxSize.height : height;
            width = settings.maxSize.width && width > settings.maxSize.width ? settings.maxSize.width : width;

            dst.height(height);
            dst.width(width);
        }

        function _scalarToFunc(scalar) {
            return function() {
                return scalar;
            };
        }

        function getText(item)
        {
            return !settings.html ? item.text() : item.html();
        }

        function setText(item, text)
        {
            return !settings.html ? item.text(text) : item.html(text);
        }

        return this;

    };
})(jQuery);;
(function($) {
    $.fn.photoStreamSlider = function(options) {
        var settings = $.extend({
            duration: 200,
            height: 48
        }, options || {});
        var self = this;

        function init()
        {
            var photo_stream = self.find(settings.photoStream),
                visible_list = $('li.visible', photo_stream),
                list = $('li', photo_stream),
                visible_width = visible_list.filter(':first').outerWidth() * visible_list.length,
                width = list.filter(':first').outerWidth() * list.length,
                height = settings.height || list.filter(':first').outerHeight(),
                wrapper = photo_stream.parent();

            wrapper.css({
                overflow: 'hidden',
                height: height,
                position: 'relative',
                padding: '4px 0',
                margin: 0,
                width: visible_width
            });

            var li = photo_stream.find('li:first'),
                first_visible = visible_list.filter(':first'),
                delta = (first_visible.outerWidth() - first_visible.width()) / 2,
                offset = 0,
                li_width = li.outerWidth();

            first_visible = first_visible.get(0);
            while (li.length) {
                if (li.get(0) == first_visible) {
                    break;
                }
                offset += li_width;
                li = li.next();
            }

            offset -= delta;
            photo_stream.css({
                position: 'absolute',
                left: -offset,
                width: width
            });

            $(settings.forwardLink).unbind('click').bind('click', function() {
                slide('forward');
                return false;
            });

            $(settings.backwardLink).unbind('click').bind('click', function() {
                slide('backward');
                return false;
            });

            self.unbind('append prepend').bind('append prepend', function(e, html) {
                if (e.type == 'append') {
                    var last_dummy = photo_stream.find('li:last'),
                        li = last_dummy,
                        dummies_tail = $();
                    while (li.hasClass('dummy')) {
                        dummies_tail = dummies_tail.add(li);
                        li = li.prev('li');
                    }
                    dummies_tail.remove();
                    photo_stream.append(html);
                } else {
                    // because we prepend and use css-left for shifting, so calc shift (width of prepended items)
                    var rendered = $('<div></div>').html(html),
                        new_list = rendered.find('li'),
                        shift = new_list.length * li_width;
                    rendered.remove();

                    var first_dummy = photo_stream.find('li:first'),
                        li = first_dummy,
                        dummies_head = $();

                    while (li.hasClass('dummy')) {
                        dummies_head = dummies_head.add(li);
                        li = li.next('li');
                    }
                    dummies_head.remove();
                    photo_stream.prepend(new_list);
                }
                // update closure vars
                list = photo_stream.find('li');
                // recalc width
                width = list.filter(':first').outerWidth() * list.length;
                photo_stream.css('width', width);

                if (e.type == 'prepend') {
                    // prepend - take into account shifting (see before)
                    var f = function() {
                        photo_stream.css('left', parseInt(photo_stream.css('left')) - shift);
                    };
                    if (photo_stream.is(':animated')) {
                        photo_stream.stop(false, true);
                        f();
                    } else {
                        f();
                    }
                }

                var selected_li = photo_stream.find('li.selected');
                if (selected_li.hasClass('visible')) {
                    self.trigger('home', [null, false]);
                }
            });

            self.unbind('forward backward').bind('forward backward', function(e, options) {
                slide({
                    direction: e.type,
                    steps: options.steps,
                    animate: typeof options.animate !== 'undefined' ? options.animate : true,
                    fn: options.fn
                });
                var selected_li = photo_stream.find('li.selected'),
                    candidate_li = e.type == 'forward' ? selected_li.next('li:not(.dummy)') : selected_li.prev('li:not(.dummy)');
                if (candidate_li.length) {
                    selected_li.removeClass('selected');
                    candidate_li.addClass('selected');
                }
            });

            self.unbind('home').bind('home', function(e, fn, animate) {
                var middle = parseInt(visible_list.length / 2),
                    current = visible_list.filter(':eq('+middle+')'),
                    next_selected = current.nextAll('.selected:first'),
                    prev_selected = current.prevAll('.selected:first'),
                    cnt = 0,
                    direction = '';

                if (typeof fn !== 'function') {
                    animate = fn;
                }
                animate = typeof animate !== 'undefined' ? animate : true;
                if (next_selected.length) {
                    direction = 'forward';
                    current.nextAll().each(function() {
                        ++cnt;
                        if ($(this).hasClass('selected')) {
                            return false;
                        }
                    });
                } else if (prev_selected.length) {
                    direction = 'backward';
                    current.prevAll().each(function() {
                        ++cnt;
                        if ($(this).hasClass('selected')) {
                            return false;
                        }
                    });
                }
                if (direction && cnt) {
                    slide({
                        direction: direction,
                        steps: cnt,
                        fn: fn,
                        animate: animate
                    });
                } else {
                    if (typeof fn == 'function') {
                        fn();
                    }
                }
                return false;
            });

            self.unbind('refresh').bind('refresh', function() {
                init();
            });

            function slide(options)
            {
                if (typeof options == 'string') {
                    options = {
                        direction: options,
                        animate: true
                    };
                }
                var direction = options['direction'] || 'forward',
                    count = options['steps'] || visible_list.length;

                if (slide.execution) {
                    return;
                }
                slide.execution = true;

                var shift = visible_list.filter(':first').outerWidth() * count,
                    visible_count = visible_list.length;

                if (direction == 'forward') {
                    var last = visible_list.filter(':last'),
                        next = last.nextAll(':lt(' + count + ')'),
                        next_count = next.length,
                        last_in_next = next.filter(':last');
                    if (next_count) {
                        visible_list.removeClass('visible');
                        last_in_next.prevAll(':lt(' + (visible_count - 1) + ')').addClass('visible');
                        last_in_next.addClass('visible');
                    }
                } else {
                    var first = visible_list.filter(':first'),
                        prev = first.prevAll(':lt(' + count + ')'),
                        prev_count = prev.length,
                        first_in_prev = prev.filter(':last');       // prevAll return list in right-to-left order, so first is last
                    if (prev_count) {
                        visible_list.removeClass('visible');
                        first_in_prev.nextAll(':lt(' + (visible_count - 1) + ')').addClass('visible').show();
                        first_in_prev.addClass('visible');
                    }
                }
                // update closure
                visible_list = $('li.visible', photo_stream);
                // sliding itself
                var left = photo_stream.position()['left'];
                if (direction == 'forward') {
                    var bound = width - visible_width - delta;
                    left = left - shift;
                    left = left > -bound ? left : -bound;
                } else {
                    left = left + shift;
                    left = left < delta ? left : delta;
                }

                function afterAnimate() {
                    slide.execution = false;
                    var callback = 'on' + direction.charAt(0).toUpperCase() + direction.slice(1);
                    callback = settings[callback];
                    if (typeof callback == 'function') {
                        callback.call(self);
                    }
                    callback = options.fn;
                    if (typeof callback == 'function') {
                        callback.call(self);
                    }
                }
                if (options.animate) {
                    photo_stream.animate({
                        left: left
                    }, settings.duration, afterAnimate);
                } else {
                    photo_stream.css({
                        left: left
                    });
                    afterAnimate();
                }
            }
        }

        init();

    };
})(jQuery);;
(function($) {
    $.product_dragndrop = {
        handlers: {},
        options: {},
        init: function(options) {
            this.options = options;
            if (options.collections) {
                this.initDragCollections();
                this.initDropCollections();
            }
            if (options.products) {
                this.initDragProducts();
                this.initDropProducts();
            }
            return this;
        },

        bind: function(event, handler) {
            this.handlers[event] = handler;
            return this;
        },

        trigger: function(event) {
            if (typeof this.handlers[event] === 'function') {
                return this.handlers[event].apply(this, Array.prototype.slice.call(arguments, 1));
            }
        },

        initDragProducts: function() {
            var product_list = $('#product-list');
            var context = product_list.find('.product');
            context.find('.drag-handle').live('selectstart', function() {
                document.onselectstart = function() {
                    return false;
                };
                return false;
            });
            context.liveDraggable({
                opacity: 0.75,
                zIndex: 9999,
                distance: 5,
                appendTo: 'body',
                cursor: 'move',
                refreshPositions: true,
                containment: [
                      0,
                      0,
                      $(window).width(),
                      {
                          toString: function() {
                              return $(document).height();  // we have lengthened document, so make flexible calculating (use typecast method toString)
                          }
                      }
                ],
                start: function(event, ui) {
                    // prevent default-browser drag-and-drop action
                    document.ondragstart = function() {
                        return false;
                    };
                    // scroll fix. See helperScroll
                    ui.helper.data('scrollTop', $(document).scrollTop());
                    $(document).bind('scroll', $.product_dragndrop._scrolHelper);

                    $('.block.drop-target').addClass('drag-active');
                },
                handle: '.drag-handle',
                stop: function(event, ui) {
                    document.ondragstart   = null;
                    document.onselectstart = null;

                    var self = $(this);
                    if (!self.find('input:checked').length) {
                        self.removeClass('selected');
                    }

                    $(document).unbind('scroll', $.product_dragndrop._scrolHelper);
                    $('.block.drop-target').removeClass('drag-active');
                },
                helper: function(event, ui) {
                    var count = 1;
                    var select_all_input = product_list.find('.s-select-all');
                    if (select_all_input.is(':checked')) {
                        count = select_all_input.attr('data-count');
                    } else {
                        var selected = product_list.find('.product.selected');
                        if (selected.length) {
                            if (selected.index(this) !== -1) {
                                count = selected.length;
                            } else {
                                $(this).trigger('select', true);
                                count = selected.length + 1;
                            }
                        } else {
                            $(this).addClass('selected');
                        }
                    }
                    return '<div id="products-helper"><span class="indicator red">'+count+'</span><i class="icon10 no-bw" style="display:none;"></i></div>';
                },
                drag: function(event, ui) {
                    var e = event.originalEvent;
                    ui.position.left = e.pageX - 20;
                    ui.position.top = e.pageY;
                }
            });
        },

        initDropProducts: function() {
            // dropping process in photo-list itself. Dropping process is trying sorting
            $('#product-list .product').liveDroppable({
                disabled: false,
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {
                    if (!$.product_dragndrop.trigger('is_product_sortable')) {
                        return false;
                    }
                    // activate item
                    var self = $(this);
                    if (!ui.draggable.hasClass('product')) {
                        return false;
                    }
                    if (self.hasClass('last')) {
                        ui.draggable.extDragActivate = (function(self) {
                            return function (e) {
                                $.product_dragndrop._extDragActivate(e, self);
                            };
                        })(self);
                        $(document).bind('mousemove', ui.draggable.extDragActivate);
                    } else {
                        self.addClass('drag-active');
                    }
                },
                out: function(event, ui) {
                    if (!$.product_dragndrop.trigger('is_product_sortable')) {
                        return false;
                    }
                    $(this).removeClass('drag-active drag-active-last');
                    if (ui.draggable.extDragActivate) {
                        $(document).unbind('mousemove', ui.draggable.extDragActivate);
                    }
                },
                drop: function(event, ui) {
                    if (!$.product_dragndrop.trigger('is_product_sortable')) {
                        return false;
                    }
                    var self = $(this);
                    // drop into itself is illegal
                    if (self.hasClass('selected')) {
                        return false;
                    }

                    var selected = $('#product-list').find('.product.selected');
                    var before_id = null;
                    if (!self.hasClass('drag-active-last')) {
                        before_id = self.attr('data-product-id');
                    }

                    if (self.hasClass('last') && self.hasClass('drag-active-last')) {
                        self.after(selected).removeClass('drag-active drag-active-last last');
                        selected.filter(':last').addClass('last');
                    } else {
                        self.before(selected).removeClass('drag-active');
                    }
                    self.removeClass('drag-active drag-active-last');
                    if (ui.draggable.extDragActivate) {
                        $(document).unbind('mousemove', ui.draggable.extDragActivate);
                    }
                    selected.trigger('select', false);

                    var product_ids = selected.map(function() {
                        return $(this).attr('data-product-id');
                    }).toArray();
                    $.product_dragndrop.trigger('move_product', {
                        product_ids: product_ids, before_id: before_id,
                        error: function(r) {
                            if (r && console) {
                                console.log(typeof r.errors !== 'undefined' ? r.errors : r);
                            }
                            // TODO: restore
                        }
                    });
                }
            });
        },

        initDragCollections: function() {
            var containment = $('#wa-app .sidebar:first');
            var containment_pos = containment.position();
            var containment_metrics = { width: containment.width(), height: containment.height() };

            $(".s-collection-list li.dr").liveDraggable({
                containment: [
                      containment_pos.left,
                      containment_pos.top,
                      containment_pos.left + containment_metrics.width + containment_metrics.width*0.25,
                      containment_pos.top + containment_metrics.height
                ],
                refreshPositions: true,
                revert: 'invalid',
                helper: function() {
                    var self = $(this);
                    var parent = self.parents('.s-collection-list:first').find('ul:first');
                    var clone = self.clone().addClass('ui-draggable dr-helper').css({
                        position: 'absolute'
                    }).prependTo(parent);
                    clone.find('a:first').append('<i class="icon10 no-bw" style="margin-left: 0; margin-right: 0; display:none;"></i>');
                    return clone;
                },
                cursor: 'move',
                cursorAt: { left: 5 },
                opacity: 0.75,
                zIndex: 9999,
                distance: 5,
                start: function(event, ui) {
                    document.ondragstart = function() {
                        return false;
                    };
                },
                stop: function() {
                    document.ondragstart = null;
                }
            });
        },

        initDropCollections: function() {
            this.initDropBetweenCollections();
            this.initDropInsideCollections();
        },

        initDropBetweenCollections: function() {
            $('.s-collection-list li.drag-newposition').liveDroppable({
                greedy: true,
                tolerance: 'pointer',
                over: function(event, ui) {
                    var self = $(this);
                    if (ui.draggable.attr('data-type') != self.attr('data-type')) {
                        return false;
                    }
                    self.addClass('active').parent().parent().addClass('drag-active');
                },
                out: function(event, ui) {
                    var self = $(this);
                    if (ui.draggable.attr('data-type') != self.attr('data-type')) {
                        return false;
                    }
                    self.removeClass('active').parent().parent().removeClass('drag-active');
                },
                deactivate: function(event, ui) {
                    var self = $(this);
                    if (ui.draggable.attr('data-type') != self.attr('data-type')) {
                        return false;
                    }
                    if (self.is(':animated') || self.hasClass('dragging')) {
                        self.stop().animate({height: '2px'}, 300, null, function(){self.removeClass('dragging');});
                    }
                    self.removeClass('active').parent().parent().removeClass('drag-active');
                },
                drop: function(event, ui) {
                    var self = $(this);
                    var dr = ui.draggable;
                    var type = dr.attr('data-type');
                    if (type != self.attr('data-type')) {
                        return false;
                    }
                    var id = dr.attr('id').split('-')[1];
                    var prev = self.prev('li');
                    var sep  = dr.next();
                    var home = dr.prev();

                    if (prev.length && prev.attr('id') == 'category-'+id && !prev.hasClass('dr-helper')) {
                        return false;
                    }
                    if (this == dr.next().get(0)) {
                        return false;
                    }

                    var parent_list = dr.parent('ul');
                    var li_count = parent_list.children('li.dr[id!=category-'+id+']').length;

                    self.after(sep).after(dr);

                    if (!li_count) {
                        parent_list.parent('li').children('i').hide();
                        parent_list.hide();
                    }

                    var parent = dr.parent().parent();
                    if (parent.is('li.dr') || parent.is('.s-collection-list')) {
                        var parent_id = 0;
                        if (!parent.is('.s-collection-list')) {
                            parent_id = parent.attr('id').split('-')[1] || 0;
                        }
                        var next = dr.nextAll('li.dr:first');
                        var before_id = null;
                        if (next.length) {
                            before_id = next.attr('id').split('-')[1] || null;
                        }
                        $.product_dragndrop.trigger('move_list', {
                            id: id, type: type, before_id: before_id, parent_id: parent_id,
                            success: function(r) {
                                if (!li_count) {
                                    parent_list.parent('li').children('i').remove();
                                    parent_list.remove();
                                }
                            },
                            error: function(r) {
                                if (r && console) {
                                    console.log(typeof r.errors !== 'undefined' ? r.errors : r);
                                }
                                // restore
                                home.after(dr.next()).after(dr);
                                if (!li_count) {
                                    parent_list.parent('li').children('i').show();
                                    parent_list.show();
                                }
                            }
                        });
                    }
                }
            });
        },

        initDropInsideCollections: function() {
            $('.s-collection-list li.dr a').liveDroppable({
                tolerance: 'pointer',
                greedy: true,
                out: function(event, ui) {
                    var dr = ui.draggable;
                    var self = $(this).parent();
                    if (!dr.hasClass('product') && self.attr('data-type') != dr.attr('data-type')) {
                        return false;
                    }
                    if (dr.hasClass('product')) {
                        ui.helper.find('span').show().end().find('i').hide();       // show 'circle'-icon
                    }
                    self.removeClass('drag-newparent');
                },
                over: function(event, ui) {
                    var dr = ui.draggable;
                    var self = $(this).parent();
                    var type = dr.attr('data-type');
                    if (!dr.hasClass('product') && type != self.attr('data-type')) {
                        return false;
                    }
                    if (type != 'set') {
                        self.addClass('drag-newparent');
                    }
                    if (dr.hasClass('product')) {
                        if (self.hasClass('dynamic')) {
                            ui.helper.find('span').hide().end().find('i').show();   // show 'cross'-icon
                        } else {
                            ui.helper.find('span').show().end().find('i').hide();   // show 'circle'-icon
                        }
                        return false;
                    }

                    if (!dr.hasClass('dynamic') && self.hasClass('dynamic')) {
                        ui.helper.find('i.no-bw').show();
                        return false;
                    } else {
                        ui.helper.find('i.no-bw').hide();
                    }

                    var drSelector = '.dr[id!="'+dr.attr('id')+'"]';
                    var nearby = $();

                    // helper to widen all spaces below the current li and above next li (which may be on another tree level, but not inside current)
                    var addBelow = function(nearby, current) {
                        if (!current.length) {
                            return nearby;
                        }
                        nearby = nearby.add(current.nextUntil(drSelector).filter('li.drag-newposition'));
                        if (current.nextAll(drSelector).length > 0) {
                            return nearby;
                        }
                        return arguments.callee(nearby, current.parent().closest('li'));
                    };

                    // widen all spaces above the current li and below the prev li (which may be on another tree level)
                    var above = self.prevAll(drSelector+':first');
                    if(above.length > 0) {
                        var d = above.find(drSelector);
                        if (d.length > 0) {
                            nearby = addBelow(nearby, d.last());
                        } else {
                            nearby = addBelow(nearby, above);
                        }
                    } else {
                        nearby = nearby.add(self.prevUntil(drSelector).filter('li.drag-newposition'));
                    }

                    // widen all spaces below the current li and above the next li (which may be on another tree level)
                    if (self.children('ul').children(drSelector).length > 0) {
                        nearby = nearby.add(self.children('ul').children('li.drag-newposition:first'));
                    } else {
                        nearby = addBelow(nearby, self);
                    }

                    var old = $('.drag-newposition:animated, .drag-newposition.dragging').not(nearby);

                    old.stop().animate({height: '2px'}, 300, null, function(){old.removeClass('dragging');});
                    nearby.stop().animate({height: '10px'}, 300, null, function(){nearby.addClass('dragging');});
                },
                drop: function(event, ui) {
                    var dr = ui.draggable;
                    var self = $(this).parent();
                    var type = dr.attr('data-type');
                    if (!dr.hasClass('product')) {
                        if (type == 'set') {
                            return false;
                        }
                        if (self.attr('id') == dr.attr('id')) {
                            return false;
                        }
                        if (type != self.attr('data-type')) {
                            return false;
                        }
                    }
                    self.removeClass('drag-newparent');

                    // coping product to category section
                    if (dr.hasClass('product')) {
                        if (self.hasClass('dynamic')) {
                            return false;
                        }
                        var product_list = $('#product-list');

                        var data = {};
                        if (product_list.find('.s-select-all').is(':checked')) {
                            data.whole_list = true;
                        } else {
                            var products = product_list.find('.product.selected');
                            data.product_ids = products.map(function() {
                                return $(this).attr('data-product-id');
                            }).toArray();
                        }

                        $.product_dragndrop.trigger('add_to_list', $.extend(data, {
                            collection_param: self.attr('id').replace('-', '_id='),
                            success: function(r) {
                                if (data.whole_list) {
                                    product_list.find('.s-select-all').trigger('select', false);
                                } else if (data.product_ids && data.product_ids.length) {
                                    products.trigger('select', false);
                                }
                                if (r.data) {
                                    self.find('.count:first').text(r.data.count);
                                    self.trigger('count_subtree');
                                }
                            }
                        }));
                        return false;
                    } else {
                        if (!dr.hasClass('dynamic') && self.hasClass('dynamic')) {
                            return false;
                        }
                    }

                    // sorting categories
                    var id = dr.attr('id').split('-')[1];
                    if (self.attr('id') == 'category-'+id) {
                        return false;
                    }

                    if (dr.hasClass('product')) {
                        var selected = $('#product-list').find('.product.selected');
                        selected.trigger('select', false);
                        return false;
                    }
                    var list;
                    var sep  = dr.next();
                    var home = dr.prev();
                    if (self.hasClass('drag-newposition')) {
                        list = self.parent('ul');
                    } else {
                        if (self.children('ul').length) {
                            list =  self.children('ul');
                        } else {
                            list = $('<ul class="menu-v with-icons dr unapproved"><li class="drag-newposition unapproved" data-type="'+type+'"></li></ul>').appendTo(self);
                            list.find('.drag-newposition').mouseover(); // init droppable
                            $('<i class="icon16 darr overhanging collapse-handler unapproved"></i>').insertBefore(self.children('a'));
                        }
                    }

                    var parent_list = dr.parent('ul');
                    var li_count = parent_list.children('li.dr[id!=category-'+id+']').length;

                    list.append(dr).append(sep);

                    if (!li_count) {
                        parent_list.parent('li').children('i').hide();
                        parent_list.hide();
                    }

                    var parent = self;
                    if (parent.is('li.dr')) {
                        var parent_id = self.attr('id').split('-')[1] || 0;
                        $.product_dragndrop.trigger('move_list', {
                            id: id, type: type, parent_id: parent_id,
                            success: function(r) {
                                if (!li_count) {
                                    parent_list.parent('li').children('i').remove();
                                    parent_list.remove();
                                }
                                $('.s-collection-list .unapproved').removeClass('unapproved');
                                self.trigger('count_subtree');
                            },
                            error: function(r) {
                                if (r && console) {
                                    console.log(typeof r.errors !== 'undefined' ? r.errors : r);
                                }
                                // restore
                                home.after(dr).after(sep);
                                if (!li_count) {
                                    parent_list.parent('li').children('i').show();
                                    parent_list.show();
                                }
                                $('.s-collection-list .unapproved').remove();
                            }
                        });
                    }
                }
            });
        },

        // when scrolling page drag-n-drop helper must moving too with cursor
        _scrolHelper: function(e) {
            var helper = $('#products-helper'),
                prev_scroll_top = helper.data('scrollTop'),
                scroll_top = $(document).scrollTop(),
                shift = prev_scroll_top ? scroll_top - prev_scroll_top : 50;

            helper.css('top', helper.position().top + shift + 'px');
            helper.data('scrollTop', scroll_top);
        },

        // active/inactive drop-item both left and right
        _extDragActivate: function(e, self) {
            if (!self.hasClass('last')) {
                self.addClass('drag-active');
                return;
            }
            var pageX = e.pageX,
                pageY = e.pageY,
                self_width = self.width(),
                self_height = self.height(),
                self_offset = self.offset();

            if ($.product_dragndrop.options.view == 'thumbs') {
                if (pageX > self_offset.left + self_width*0.5) {
                    self.removeClass('drag-active').addClass('drag-active-last');
                } else if (pageX > self_offset.left) {
                    self.removeClass('drag-active-last').addClass('drag-active');
                }
            } else if ($.product_dragndrop.options.view == 'table') {
                if (pageY > self_offset.top + self_height*0.5) {
                    self.removeClass('drag-active').addClass('drag-active-last');
                } else if (pageY > self_offset.top) {
                    self.removeClass('drag-active-last').addClass('drag-active');
                }
            }
            if (pageY < self_offset.top || pageY > self_offset.top + self_height ||
                    pageX < self_offset.left || pageX > self_offset.left + self_width)
            {
                self.removeClass('drag-active drag-active-last');
            }
        }
    };
})(jQuery);;
(function($) {

    // This should probably be somewhere else...
    if (!Array.prototype.filter) {
      Array.prototype.filter = function(fun /*, thisp*/) {
        var len = this.length;
        if (typeof fun != "function")
          throw new TypeError();

        var res = new Array();
        var thisp = arguments[1];
        for (var i = 0; i < len; i++) {
          if (i in this) {
            var val = this[i]; // in case fun mutates this
            if (fun.call(thisp, val, i, this))
              res.push(val);
          }
        }

        return res;
      };
    }

    $.storage = new $.store();
    $.products = {
        hash : '',
        list_hash : '', // hash of last list
        list_params : {}, // params of last list
        options : {
            view : 'thumbs' // default view
        },
        random : '',
        init : function(options) {
            $.extend(this.options, options);
            this.initRouting();
            this.initSearch();
            this.initSidebar();
            this.initCollapsible();
        },

        data : {
            'prev_action' : null
        },

        initRouting : function() {
            if (typeof($.History) != "undefined") {
                $.History.bind(function() {
                    $.products.dispatch();
                });
            }
            $.wa.errorHandler = function(xhr) {
                if ((xhr.status === 403) || (xhr.status === 404)) {
                    var text = $(xhr.responseText);
                    console.log(text);
                    if (text.find('.dialog-content').length) {
                        text = $('<div class="block double-padded"></div>').append(text.find('.dialog-content *'));

                    } else {
                        text = $('<div class="block double-padded"></div>').append(text.find(':not(style)'));
                    }
                    $("#s-content").empty().append(text);
                    return false;
                }
                return true;
            };
            var hash = window.location.hash;
            if (hash === '#/' || !hash) {
                this.dispatch();
            } else {
                $.wa.setHash(hash);
            }
        },

        dispatch : function(hash) {
            if (hash === undefined) {
                hash = window.location.hash;
            }
            hash = hash.replace(/(^[^#]*#\/*|\/$)/g, ''); /* fix syntax highlight */
            this.hash = hash;
            try {
                if (hash) {
                    hash = hash.split('/');
                    if (hash[0]) {
                        var actionName = "";
                        var attrMarker = hash.length;
                        for (var i = 0; i < hash.length; i++) {
                            var h = hash[i];
                            if (i < 2) {
                                if (i === 0) {
                                    actionName = h;
                                } else if (actionName == 'product' || actionName == 'tag' || actionName == 'search' || actionName == 'plugins'
                                || actionName == 'pages' || actionName == 'stocks') {
                                    attrMarker = i;
                                    break;
                                } else if (parseInt(h, 10) != h && h.indexOf('=') == -1) {
                                    actionName += h.substr(0, 1).toUpperCase() + h.substr(1);
                                } else {
                                    attrMarker = i;
                                    break;
                                }
                            } else {
                                attrMarker = i;
                                break;
                            }
                        }
                        var attr = hash.slice(attrMarker);
                        this.preExecute(actionName, attr);
                        if (typeof(this[actionName + 'Action']) == 'function') {
                            $.shop.trace('$.products.dispatch', [actionName + 'Action', attr]);
                            this[actionName + 'Action'].apply(this, attr);
                        } else {
                            $.shop.error('Invalid action name:', actionName + 'Action');
                        }
                    } else {
                        this.preExecute();
                        this.defaultAction();
                    }
                } else {
                    this.preExecute();
                    this.defaultAction();
                }
            } catch (e) {
                $.shop.error(e.message, e);
            }
        },

        load : function(url, callback) {
            var r = Math.random();
            this.random = r;
            var self = this;
            $.get(url, function(result) {
                if (self.random != r) {
                    // too late: user clicked something else.
                    return;
                }
                $("#s-content").removeClass('bordered-left').html(result);
                $('html, body').animate({
                    scrollTop : 0
                }, 200);
                if (callback) {
                    try {
                        callback.call(this);
                    } catch (e) {
                        $.shop.error('$.products.load callback error: ' + e.message, e);
                    }
                }
            });
        },

        addOptions : function(options) {
            this.options = $.extend(this.options, options || {});
        },

        preExecute : function(action, args) {
            try {
                if (this.data.prev_action && (this.data.prev_action != action)) {
                    var actionName = this.data.prev_action + 'Termination';
                    $.shop.trace('$.products.preExecute', [actionName, action]);
                    if (typeof(this[actionName]) == 'function') {
                        this[actionName].apply(this, []);
                    }
                }
                this.data.prev_action = action;
            } catch (e) {
                $.shop.error('preExecute error: ' + e.message, e);
            }
        },

        defaultAction : function() {
            this.productsAction();
        },

        buildProductsUrlComponent : function(params) {
            return 'view=' + (params.view || this.options.view) + (params.category_id ? '&category_id=' + params.category_id : '')
            + (params.set_id ? '&set_id=' + params.set_id : '') + (params.tag ? '&tag=' + params.tag : '') + (params.sort ? '&sort=' + params.sort : '')
            + (params.order ? '&order=' + params.order : '') + (params.text ? '&text=' + params.text : '') + (params.edit ? '&edit=' + params.edit : '')
            + (params.hash ? '&hash=' + params.hash : '') + (params.type_id ? '&type_id=' + params.type_id : '');
        },

        productsAction : function() {
            var params = Array.prototype.join.call(arguments, '/');
            params = $.shop.helper.parseParams(params || '');
            if (!params.view) {
                params.view = $.storage.get('shop/products/view') || this.options.view;
            }
            $.storage.set('shop/products/view', params.view);
            this.list_hash = this.hash;
            this.list_params = params;
            this.load('?module=products&' + this.buildProductsUrlComponent(params));
        },

        productAction : function(id, action, tab) {
            var path = Array.prototype.slice.call(arguments).filter(function(chunk) {
                return chunk.length;
            }).join('/');
            $.shop.trace('$.products.productAction', [path, arguments]);
            var url = '?module=product';
            if (id) {
                url += '&id=' + id;
            }
            if (typeof($.product) != 'undefined') {
                $.product.dispatch(path);
            } else {
                this.load(url, function(response) {
                    $.product.dispatch(path);
                });
            }
        },

        productTermination : function() {
            if (typeof($.product) != 'undefined') {
                $.product.termination();
            }
        },

        reviewsAction : function() {
            this.load('?module=reviews');
        },

        stocksAction : function(order) {
            this.load('?module=stocks' + (order ? '&order=' + order : ''));
        },

        servicesAction : function(id) {
            this.load('?module=services' + (id ? '&id=' + id : ''), function() {
                $("#s-content").addClass('bordered-left');
                if (typeof $.products.afterServicesAction === 'function') {
                    $.products.afterServicesAction();
                }
            });
        },

        initCollapsible : function() {
            var key_prefix = 'shop/products/';
            var collapse = function(el, not_save) {
                $(el).removeClass('darr').addClass('rarr');
                var item = target(el).hide();
                if (!not_save) {
                    $.storage.set(key_prefix + el.id + '/collapse', 1);
                }
                var parent = item.closest('li');
                if (parent.attr('data-type') == 'category') {
                    parent.trigger('count_subtree', true);
                }
            };
            var expand = function(el) {
                $(el).removeClass('rarr').addClass('darr');
                var item = target(el).show();
                $.storage.del(key_prefix + el.id + '/collapse');
                var parent = item.closest('li');
                if (parent.attr('data-type') == 'category') {
                    parent.trigger('count_subtree', false);
                }
            };
            var target = function(el) {
                var parent = $(el).parent();
                return parent.is('li') ? parent.find('ul:first') : parent.next();
            };

            $(".collapse-handler").die('click').live('click', function() {
                var self = $(this);
                if (self.hasClass('darr')) {
                    collapse(this);
                } else {
                    expand(this);
                }
            }).each(function() {
                var key = key_prefix + this.id + '/collapse';
                if ($.storage.get(key)) {
                    collapse(this, true);
                }
            });
        },

        initSearch : function() {
            var search = function() {
                var query = this.value, match = $.products.hash.match(/[&\/](text=.*?&|text=.*)/);
                var hash = $.products.hash;
                if (match) {
                    var text = match[1];
                    if (query) {
                        var new_text = text.substr(-1) == '&' ? 'text=' + encodeURIComponent(query) + '&' : 'text=' + encodeURIComponent(query);
                        hash = hash.replace(text, new_text);
                    } else {
                        if (text.substr(-1) != '&') {
                            text = '[&\/]' + text;
                        }
                        hash = hash.replace(new RegExp(text), '');
                    }
                } else if (query) {
                    hash = 'products/' + $.products.buildProductsUrlComponent($.products.list_params) + '&text=' + encodeURIComponent(query);
                } else {
                    hash = 'products/' + $.products.buildProductsUrlComponent($.products.list_params);
                }
                location.hash = '#/' + hash;
            };
            // HTML5 search input search-event isn't suppotred
            $('#s-products-search').unbind('keydown').bind('keydown', function(event) {
                if (event.keyCode == 13) { // 'Enter'
                    search.call(this);
                    $(this).autocomplete("close");
                    return false;
                }
            });

            $('#s-products-search').unbind('search').bind('search', function() {
                search.call(this);
                return false;
            });

            $("#s-products-search").autocomplete({
                source : '?action=autocomplete',
                minLength : 3,
                delay : 300,
                select : function(event, ui) {
                    $.wa.setHash('#/product/' + ui.item.id);
                    return false;
                }
            });
        },

        initSidebar : function() {
            var sidebar = $('#s-sidebar');
            $.product_dragndrop.init({
                collections : true
            }).bind('move_list', function(options) {
                if (!options.type) {
                    if (typeof options.error === 'function') {
                        options.error('Unknown list type');
                    }
                    return;
                }
                var data = {
                    id : options.id,
                    type : options.type,
                    parent_id : options.parent_id || 0
                };
                if (options.before_id) {
                    data.before_id = options.before_id;
                }
                $.products.jsonPost('?module=products&action=moveList', data, options.success, options.error);
            });
            sidebar.off('add', '.s-collection-list ul').on('add', '.s-collection-list ul', function(e, new_item, type) {
                var self = $(this), parent = self.parents('.s-collection-list:first');
                self.prepend(tmpl('template-sidebar-list-item', {
                    type : type,
                    item : new_item
                })).show();
                parent.find('.s-empty-list').hide();
                return false;
            });

            sidebar.unbind('update').bind('update', function(e, lists) {
                for (var type in lists) {
                    if (type == 'all') {
                        $('#s-all-products').find('.count:first').text(lists[type].count);
                        continue;
                    }
                    var prefix = '#' + type + '-';
                    for (var id in lists[type]) {
                        $(prefix + id).find('.count:first').text(lists[type][id].count);
                    }
                }
                return false;
            });

            $('#s-tag-cloud').unbind('update').bind('update', function(e, tag_cloud) {
                // redraw tag cloud
                var html = '<ul class="tags">' +
                    '<li class="block align-center">';
                for (var tag_id in tag_cloud) {
                    var tag = tag_cloud[tag_id];
                    html +=
                        '<a href="#/products/tag='  + tag.uri_name +
                            '/" style="font-size: ' + tag.size +
                            '%; opacity: ' + tag.opacity +
                            '"  data-id="' + tag.id +
                            '"  class="s-product-list">' + tag.name +
                        '</a>';
                }
                html += '</li></ul>';
                $('#s-tag-cloud').html(html).parents('.block:first').show();
                return false;
            });

            sidebar.off('count_subtree', '.s-collection-list li').on('count_subtree', '.s-collection-list li', function(e, collapsed) {
                var item = $(this);
                if (typeof collapsed === 'undefined') {
                    collapsed = item.find('i.collapse-handler').hasClass('rarr');
                }

                var counter = item.find('>.count:not(.subtree)');
                var subtree_counter = item.find('>.subtree');
                if (!subtree_counter.length) {
                    subtree_counter = counter.clone().addClass('subtree').hide();
                    counter.after(subtree_counter);
                }
                if (collapsed) {
                    var total_count = parseInt(counter.text(), 10) || 0;
                    item.find('li.dr:not(.dynamic)>.count:not(.subtree)').each(function() {
                        total_count += parseInt($(this).text(), 10) || 0;
                    });
                    subtree_counter.text(total_count).show();
                    counter.hide();
                } else {
                    subtree_counter.hide();
                    counter.show();
                }
                return false;
            });
        },

        jsonPost : function(url, data, success, error) {
            $.shop.jsonPost(url, data, success, error);
        }
    };
})(jQuery);;
(function($) {
    $.product = {
        options: {
            'duration': 200,
            'container_selector': '#shop-productprofile',
            'message_selector': '#product-save-message',
            'form_selector': '#s-product-save',
            'update_delay': 100
        },
        message: {
            'submit': '<i class="icon16 loading"></i>',
            'success': '<i class="icon16 yes"></i>',
            'error': '<i class="icon16 no"></i>'
        },

        path: {
            'id': null,/* new or int product ID */
            'mode': null,/* null|profile|edit */
            'tab': null,
            'tail': null,
            'raw': null,
            'params': {}
            /* main */
        },
        ajax: {
            random: null,
            target: null,
            link: null,
            save: false,
            cached: {}

        },
        data: {
            'main': {}
        },
        getData: function(section, name) {
            return (this.data[section] || {})[name];
        },
        setData: function(section, name, value) {
            this.data[section] = this.data[section] || {};
            this.data[section][name] = value;
        },

        changes: {},

        standalone_tabs: ['images', 'services', 'pages', 'reviews'],

        /**
         * Setup options
         *
         * @param {} options
         * @param String tab
         */
        init: function(options, tab) {
            this.setOptions(options, tab);
        },

        setOptions: function(options, tab) {
            if (tab) {
                this[tab + '_options'] = $.extend(
                    this[tab + '_options'] || {}, options || {}
                );
            } else {
                this.options = $.extend(this.options, options || {});
            }
        },

        get: function(type) {
            if (this.options[type + '_selector']) {
                return $(this.options[type + '_selector']);
            } else {
                throw new exception('');
            }
        },

        /**
         *
         * @param String path
         * @return {'id':Int,'mode':String,'tab':String,'tail':String,'raw':String,'params':{}}
         */
        parsePath: function(path) {
            path = path.replace(/^.*#\//, '').replace(/(^\/|\/$)/, '');

            var matches = path.split('/');
            var tail = matches.pop();
            var params = {};

            if (tail.match(/^[\w_\-]+=/)) {
                params = $.shop.helper.parseParams(tail);
            } else {
                matches.push(tail);
            }
            return {
                'id': matches[0] || 'new',
                'mode': matches[1] || 'profile',
                'tab': matches[1] ? matches[2] || 'main' : false,
                'tail': matches.slice(3).join('/') || '',
                'raw': path,
                'params': params
            };
        },

        /**
         *
         * @param String path
         */
        dispatch: function(path) {
            if (typeof(path) == 'string') {
                path = this.parsePath(path);
            }
            var queue = [];
            $.shop.trace('$.product.dispatch', [this.path, path, path.raw]);
            if (!this.path.id) {
                var container = this.get('container');
                if (container.length) {
                    this.path.id = container.data('product-id');
                    queue.push('load');
                }
            }
            if (this.path.id != path.id) {
                if (this.path.id) {
                    queue.push('blur');

                }
                queue.push('load');

            } else {
                var tab = 'undefined';
                if (this.path.mode != path.mode) {
                    $.shop.trace('$.product.dispatch mode', this.path.mode + '->' + path.mode);
                    if (this.path.mode && this.path.tab) {
                        $.shop.trace('$.product.dispatch tabBlur', this.path.tab + '->' + path.tab);
                        tab = this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1);
                        queue.push(this.path.mode + 'Tab' + tab + 'Blur');
                        queue.push(this.path.mode + 'TabBlur');
                        queue.push(this.path.mode + 'Blur');
                    } else {
                        queue.push('focus');
                    }
                    queue.push(path.mode + 'Init');
                    queue.push(path.mode + 'Focus');
                } else if (this.path.tab && (path.tab != this.path.tab)) {
                    $.shop.trace('$.product.dispatch tabBlur', this.path.tab + '->' + path.tab);
                    tab = this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1);
                    queue.push(path.mode + 'Tab' + tab + 'Blur');
                    queue.push(path.mode + 'TabBlur');
                }
                queue.push(path.mode + 'Action');
                var loaded = this.tabIsLoaded(path);
                if (path.tab) {
                    tab = path.tab.substr(0, 1).toUpperCase() + path.tab.substr(1);
                }

                if (path.tab && (path.tab != this.path.tab)) {
                    $.shop.trace('$.product.dispatch tabFocus', this.path.tab + '->' + path.tab);

                    if (loaded) {
                        queue.push(path.mode + 'TabShow');
                        queue.push(path.mode + 'TabInit');
                        queue.push(path.mode + 'Tab' + tab + 'Init');
                        queue.push(path.mode + 'TabFocus');
                        queue.push(path.mode + 'Tab' + tab + 'Focus');
                    } else {
                        // Check if it need save
                        queue.push(path.mode + 'TabFocus');
                        var loader = path.mode + 'Tab' + tab + 'Load';
                        if (this.isCallable(loader)) {
                            queue.push(loader);
                        } else {
                            queue.push(path.mode + 'TabLoad');
                        }
                    }

                }
                if (path.tab && loaded) {
                    queue.push(path.mode + 'Tab' + tab + 'Action');
                }
            }
            for (var i = 0; i < queue.length; i++) {
                // standard convention: if method return false than stop bubble up
                if (this.call(queue[i], [path]) === false) {
                    return false;
                }
            }
        },

        termination: function() {
            var queue = [];
            if (this.path.mode && this.path.tab) {
                var tab = this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1);
                queue.push(this.path.mode + 'Tab' + tab + 'Blur');
                queue.push(this.path.mode + 'TabBlur');
                queue.push(this.path.mode + 'Blur');
            }
            queue.push('blur');

            for (var i = 0; i < queue.length; i++) {
                this.call(queue[i], []);
            }
        },

        isCallable: function(name) {
            return (typeof(this[name]) == 'function');
        },
        tabIsLoaded: function(path) {
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            return ($tab.length ? true : false);
        },

        call: function(name, args, callback) {
            var result = null;
            var callable = this.isCallable(name);
            args = args || [];
            $.shop.trace('$.product.call', [name, args, callable]);
            if (callable) {
                try {
                    result = this[name].apply(this, args);
                } catch (e) {
                    $.shop.error(
                        "Error at method $.product." + name +
                        ". Original message: " + e.message,
                        e
                    );
                }
            }
            return result;
        },
        load: function(path) {
            var $container = this.get('container');
            if (!$container.length || ($container.data('product-id') != path.id)) {
                var self = this;
                var url = '?module=product&id=' + path.id;
                $.shop.trace('$.product.load product', url);
                $.products.load(url, function() {
                    self.dispatch(path);
                });
            }

            this.editTabMainData.sku_id = (path.id == 'new') ? -1 : 0;
            this.editTabMainData.stocks = {};
        },

        focus: function() {
            $('*').off('.product');
            this.helper.init();
            // var self = this;
            /**
             * @todo use generic error handler for ajax pages
             */
            // $.wa.errorHandler = function(xhr) {
            // if ($.product.ajax.target && xhr.responseText) {
            // $.shop.trace('errorHandler', self.ajax.target);
            // $.product.ajax.target.empty().append($(xhr.responseText).find(':not(style)'));
            // }
            // if ($.product.ajax.link) {
            // $.product.ajax.link.find('.s-product-edit-tab-status').html('<i class="icon10 exclamation"></i>');
            // }
            // $.product.ajax.target = null;
            // $.product.ajax.link = null;
            // $.shop.error('ajax error', xhr);
            // return false;
            // };
        },

        blur: function() {
            this.path.id = null;
            this.path.mode = null;
            this.path.tab = null;
            this.path.tail = null;
            $('*').off('.product');

            $('#mainmenu .s-level2').show();
            $('#s-product-edit-menu, #s-product-edit-save-panel').hide();
            var duration = 'fast';

            $('#s-sidebar, #s-toolbar').show().animate({
                width: '200px'
            }, duration).queue(function() {
                $(this).dequeue();
            });
            $('#maincontent').animate({
                'margin-top': '84px'
            }, duration);
            $('#s-content').animate({
                'margin-left': '200px'
            }, duration);
        },

        saveData: function(mode, tab, callback) {
            var self = this;
            var form = self.get('form');

            var sku_type_input_type = 'radio';
            var sku_type_input = form.find('input[name="product[sku_type]"]:first');
            if (sku_type_input.is(':radio')) {
                sku_type = form.find('input[name="product[sku_type]"]:checked').val();
                sku_type_input = form.find('input[name="product[sku_type]"]');
            } else {
                sku_type_input_type = 'hidden';
                sku_type = sku_type_input.val();
            }

            if (sku_type == '1') {
                var any_checked = $('#s-product-feature-superposition').find('input:checked:first').length;
                if (!any_checked) {
                    if (sku_type_input_type == 'radio') {
                        sku_type_input.filter('[value=0]').attr('checked', true);
                        $.product.onSkuTypeChange(0);
                    }
                    return false;
                }
            }

            waEditorUpdateSource({
                id: 's-product-description-content'
            });

            if (self.ajax.save) {
                setTimeout(function() {
                    self.saveData(mode, tab, callback);
                }, 100);
                return false;
            }
            if (this.path.tab) {
                var save_method = 'editTab' + this.path.tab.substr(0, 1).toUpperCase() + this.path.tab.substr(1) + 'Save';
                if (this.call(save_method) === false) {
                    return false;
                }
            }
            self.ajax.save = true;

            // cut out all spaces for prices
            form.find('.s-price').find('input').each(function() {
                this.value = this.value.replace(/\s+/g, '');
            });

            $.shop.trace('$.product.saveData(' + mode + ',' + tab + ')');
            /* disable not changed data */
            $(form).find(':input[name^="product\["]:not(:disabled)').each(function() {
                var type = $(this).attr('type');
                if ((type != 'text') && (type != 'textarea')) {
                    return true;
                }

                if (this.defaultValue == this.value) {
                    $(this).attr('disabled', true).addClass('js-ajax-disabled');
                } else if ($(this).hasClass('js-ajax-disabled')) {
                    $(this).removeAttr('disabled').removeClass('js-ajax-disabled');
                }
            });
            this.refresh('submit');

            $('#product-tags_tag').trigger(jQuery.Event("keypress", {
                which: 13
            }));

            $.ajax({
                'url': $(form).attr('action'),
                'data': $(form).serialize(),
                'dataType': 'json',
                'type': 'post',
                success: function(response) {
                    if (response.status == 'fail') {
                        self.refresh('error', response.errors);
                    } else if (response.data.redirect) {
                        $.shop.trace('$.product.saveData redirect', response.data.redirect);
                        window.location.href = response.data.redirect;
                    } else {
                        self.refresh('success', response.data.message || '');
                        $.shop.trace('$.product.saveData updateData', [mode, tab]);
                        self.updateData(response.data, mode, tab);
                        if (callback && (typeof(callback) == 'function')) {
                            callback();
                        }

                        if (self.path.tab) {
                            var method = 'editTab' + self.path.tab.substr(0, 1).toUpperCase() + self.path.tab.substr(1) + 'Saved';
                            if (self.call(method) === false) {
                                return false;
                            }
                        }
                    }
                    self.ajax.save = false;
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    self.ajax.save = false;
                    self.refresh('error', textStatus);
                }
            });
            return false;
            // force reload data
            // this.container.data('product-id',this.path.id + '-edited');
        },

        updateData: function(data, mode, tab) {

            $.shop.trace('$.product.updateData(' + mode + ',' + tab + ')', data);
            var tab_content = $('#s-product-edit-forms .s-product-form.main');

            var old_id = this.path.id;

            if (!this.path.id || (this.path.id == 'new')) {
                this.path.id = data.id;
                $(this.options.container_selector).data('product-id', this.path.id);
                var hash = '/product/' + this.path.id + '/';
                if ((mode !== null) && (mode = mode || this.path.mode || 'profile')) {
                    if (mode != 'profile') {
                        hash += mode + '/';
                    }
                    if ((tab !== null) && (tab = tab || this.path.tab || '')) {
                        if (tab.toLowerCase() != 'main') {
                            hash += tab + '/';
                        }
                    }
                }
                $.shop.trace('update location.hash=' + hash);
                var pattern = /#\/product\/new\//;
                var replace = '#/product/' + this.path.id + '/';
                $('#shop-productprofile, #s-product-edit-menu, #s-product-edit-forms, #s-product-profile-page').find('[href*="#/product/new/"]').each(
                function() {
                    $(this).attr('href', $(this).attr('href').replace(pattern, replace));
                });
                $('#s-product-edit-forms').find(':input[name="product\[id\]"]').val(this.path.id);

                window.location.hash = hash;
            } else if (this.path.id != data.id) {
                $.shop.error('Abnormal product ID change', [this.path.id, data]);
            }

            var h1 = $('#shop-productprofile h1');
            h1.find('.s-product-name:first').text(data.name);
            h1.find('.s-product-id').show().text('id: ' + data.id);
            document.title = data.name + $.product.options.title_suffix;

            var $container = tab_content.find(':input[name="product\[type_id\]"]').parents('.value');
            $container.data('type', data.type_id);

            if (data.frontend_url) {

                // update frontend url widget in product edit page
                var frontend_url       = $('#s-product-frontend-url');
                var frontend_url_input = $('#s-product-frontend-url-input');
                frontend_url.text(data.url);
                frontend_url_input.text(data.url);
                frontend_url.trigger('readable');
                frontend_url.parent().attr('href', data.frontend_url);

                // update frontend base url mentions
                frontend_url.parents('div.value:first').
                    find('.s-frontend-base-url').each(
                        function() {
                            // update internals of link
                            if (this.tagName == 'A') {
                                var self = $(this);
                                var children = self.children();
                                self.text(data.fontend_base_url).append(children);
                            } else {
                                // just update text
                                $(this).text(data.fontend_base_url);
                            }
                        }
                    );

                $('.s-product-frontend-url-not-empty').show();
                $('.s-product-frontend-url-empty').hide();

                // update fronted url in product profile page
                $('#s-product-frontend-links').find('a').attr('href', data.frontend_url).text(data.frontend_url);

            } else {
                $('.s-product-frontend-url-not-empty').hide();
                $('.s-product-frontend-url-empty').show();
            }

            /*
             * $($.product.options.form_selector).on('change.product, keyup.product', ':input', function(e) {
             * self.onChange($(this).parents('div.s-product-form')); });
             */
            // XXX extract it into editTab%Tab%Update(data)
            this.editTabMainUpdate(
                data.raw || {},
                data.features_selectable_strings,
                old_id
            );

            // category select items
            tab_content.find('select.s-product-categories').each(function() {
                var item = $(this);
                var parent = item.parent();
                var val = item.val();
                if (val == 'select' || val == '---') {
                    var categories = $('#s-product-edit-forms .s-product-form.main select.s-product-categories');
                    if (categories.length > 1) {
                        parent.remove();
                    } else {
                        parent.find('.s-product-delete-from-category').hide();
                    }
                } else if (val == 'create') {
                    var prev_val = parent.find('input.val').val();
                    if (prev_val == '0') {
                        var categories = $('#s-product-edit-forms .s-product-form.main select.s-product-categories');
                        if (categories.length > 1) {
                            parent.remove();
                        } else {
                            item.val(prev_val); // restore previous value
                            item.show().attr('disabled', false);
                            parent.find('input.val').attr('disabled', true);
                            parent.find('.s-new-category').hide();
                            parent.find('.s-product-delete-from-category').hide();
                        }
                    } else {
                        item.val(prev_val); // restore previous value
                        item.show().attr('disabled', false);
                        parent.find('input.val').attr('disabled', true);
                        parent.find('.s-new-category').hide();
                        parent.find('.s-product-delete-from-category').show();
                    }
                }
            });

            $('#s-product-save table.s-product-skus > tbody > tr').each(function() {
                var sku_id = $(this).data('id');
                $(this).find('td.s-stock .s-product-stock-icon').each(function() {
                    var stock_id = $(this).data('stock');
                    if (data.raw && data.raw.skus && data.raw.skus[sku_id] && data.raw.skus[sku_id].stock_icon[stock_id]) {
                        $(this).html(data.raw.skus[sku_id].stock_icon[stock_id]);
                    }
                });
            });

            // skus setttings
            tab_content.find('tr.js-sku-settings').each(function() {
                var self = $(this);
                var sku_id = self.attr('data-id');
                var sku = data.raw.skus[sku_id];
                if (sku) {
                    if (sku.file_name !== undefined && !sku.file_name) {
                        self.find('.s-sku-attachment').hide();
                        self.find('.fileupload').show();
                    }
                }
            });

            this.helper.checkChanges(this.get('form'), true, data.raw || {});
            $('#s-product-edit-menu li a i.icon10.status-yellow-tiny').remove();
            $('#s-product-edit-save-panel :submit').removeClass('yellow').addClass('green');

            // if sku type is flat (0) blank selectable features info
            if (data.raw.sku_type == '0') {
                var feature_superposition = $('#s-product-feature-superposition');

                // blank values
                feature_superposition.find('input[type=checkbox]').attr('checked', false);

                // blank features
                var feature_li = feature_superposition.find('ul.features li');
                feature_li.find('.count').text('');
                feature_li.find('i').
                    removeClass('status-blue-tiny status-gray-tiny').
                    addClass('status-gray-tiny');

                // blank counter
                var counters = feature_superposition.find('.superposition-count');
                counters.find('.options').text('');
                counters.find('.skus').text('');

                // hidden link
                //tab_content.find('.s-product-skus .all-skus').text('').hide();
            }

            // TODO update name/description/etc fields
        },

        refresh: function(status, message) {
            /* enable previos disabled inputs */
            $(this.options.form_selector).find(':input[name^="product\["]:disabled.js-ajax-disabled').each(function() {
                $(this).removeAttr('disabled').removeClass('js-ajax-disabled');
            });

            var $container = $(this.options.message_selector);
            $container.removeClass('errormsg successmsg status').empty().show();

            if (this.timer) {
                clearTimeout(this.timer);
            }
            var timeout = null;
            $container.append(this.message[status] || '');
            switch (status) {
                case 'submit': {
                    $container.addClass('status');
                    break;
                }
                case 'error': {
                    $container.addClass('errormsg');
                    for (var i = 0; i < message.length; i++) {
                        $container.append(message[i][0]);
                    }
                    timeout = 20000;
                    break;
                }
                case 'success': {
                    if (message) {
                        $container.addClass('successmsg').append(message);
                    }
                    timeout = 3000;
                    $('#s-product-edit-save-panel :submit').removeClass('yellow').addClass('green');
                    break;
                }
            }
            if (timeout) {
                this.timer = setTimeout(function() {
                    $container.removeClass('errormsg successmsg status').empty().show();
                }, timeout);
            }
        },

        editTabLoad: function(path, force) {
            var self = this;
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            if (force || (!$tab.length && (path.id == 'new'))) {
                // XXX
                $.shop.trace('product.profileTabHandler: create', [path.tab + ' — create', path]);
                this.saveData(this.path.mode, path.tab, function() {
                    if (path.tab) {
                        //var tab = path.tab.substr(0, 1).toUpperCase() + path.tab.substr(1);
                        self.call(path);
                    }
                });
            } else {
                this.editTabLoadContent(path);
            }
        },

        editTabLoadContent: function(path, params) {
            var self = this;
            path = path || this.path;
            var url = '?module=product&action=' + path.tab + '&id=' + path.id;
            if (path.tail && (typeof(path.tail) != 'undefined')) {
                url += '&param[]=' + path.tail.split('/').join('&param[]=');
            }
            var r = Math.random();
            this.ajax.random = r;
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            if ($tab.length) {
                $tab.remove();
            }
            $('#s-product-edit-forms > form').append(tmpl('template-productprofile-tab', {
                id: path.tab
            }));
            $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            this.ajax.target = $tab;
            this.ajax.link = $('#s-product-edit-menu li.' + path.tab);
            $.shop.trace('$.product.editTabLoadContent', [path, url, params]);
            $.ajax({
                'url': url,
                'type': params ? 'POST' : 'GET',
                'data': params || {},
                'success': function(data, textStatus, jqXHR) {
                    $.shop.trace('$.product.loadTab status=' + textStatus);
                    if (self.ajax.random != r) {
                        // too late: user clicked something else.
                        return;
                    }
                    $tab.empty().append(data);
                    self.ajax.target = null;
                    self.ajax.link = null;
                    var hash = '#/product/' + path.id + '/edit/';
                    if (path.tab) {
                        hash += path.tab + '/';
                    }
                    if (path.tail) {
                        hash += path.tail + '/';
                    }
                    window.location.hash = hash;
                    self.dispatch(path);
                }
            });

        },

        editTabInit: function(path) {
            $('html, body').animate({
                scrollTop: 0
            }, 200);
            $('#shop-productprofile').find('.s-product-name').removeClass('editable');
        },

        editTabFocus: function(path) {
            var $tab_link = $('#s-product-edit-menu li.' + path.tab);
            $tab_link.addClass('selected');
            this.refresh();
        },

        editTabBlur: function(path) {
            if (!path) {
                return;
            }

            var self = this;
            var tab  = path.tab;

            if (this.standalone_tabs.indexOf(tab) !== -1) {
                if (this.helper.checkChanges(this.get('form'), true)) {
                    this.saveData(this.path.mode, tab, function() {
                        if (tab) {
                            self.call(path);
                        }
                    });
                }
            }

            $('#s-product-edit-forms .s-product-form').hide();
            $('#s-product-edit-menu li.selected').removeClass('selected');
            this.path.tab = null;
            this.path.tail = null;
        },

        editTabShow: function(path) {
            var $tab = $('#s-product-edit-forms .s-product-form.' + path.tab);
            if ($tab.length) {
                $tab.show();
                $.shop.trace('$.product.showTab', path);
                this.path.tab = path.tab;
            } else {
                $.shop.error('$.product.showTab', path);
            }
        },

        editClick: function($el) {
            console.log('>>>>2',$el);
            // #/product/{$product.id}/edit/stock/{$sku_id}/
            var args = $el.attr('href').replace(/.*#\/product\/(\d+|new)\/edit\//, '').replace(/\/$/, '').split('/');
            var params = [];
            var action;

            if (args.length) {
                $.shop.trace('$.product.editClick', args);
                var actionNameChunk, callable, actionName = 'editTab';
                while (actionNameChunk = args.shift()) {
                    actionName += actionNameChunk.substr(0, 1).toUpperCase() + actionNameChunk.substr(1);
                    callable = (typeof(this[actionName]) == 'function');
                    $.shop.trace('$.settings.featuresClick try', [actionName, callable, args]);
                    if (callable === true) {
                        action = actionName;
                        params = args.slice(0);
                    }
                }
            }
            if (action) {
                $.shop.trace('$.product.editClick', [action, params]);
                if (!$el.hasClass('js-confirm') || confirm($el.attr('title') || 'Are you sure?')) {
                    params.push($el);
                    try {
                        this[action].apply(this, params);
                    } catch (e) {
                        $.shop.error('Error: ' + e.message, e);
                    }
                }
            } else {
                $.shop.error('Not found js handler for link', [action, $el]);
            }
            return false;
        },

        switchSubMenu: function(menu) {
            menu = menu || 'default';
            $('#mainmenu .s-submenu > *').hide();
            $('#mainmenu .s-submenu .s-submenu-' + menu).show();
        },

        profileFocus: function() {
            var duration = this.options.duration;
            var self = this;

            // back to product profile view
            $('#s-product-edit-menu, #s-product-edit-save-panel').hide();
            self.switchSubMenu();

            $('#s-sidebar, #s-toolbar').show().animate({
                width: '200px'
            }, duration).queue(function() {
                $(this).dequeue();
                $('#s-product-edit-forms').hide();
                $('#s-product-profile-page, h1 .s-product-edit-link, #mainmenu .s-level2, #s-product-frontend-links').show();
                self.get('container').find('.back').attr('href', '#/' + $.products.list_hash);
            });
            $('#maincontent').animate({
                'margin-top': '84px'
            }, duration);
            $('#s-content').animate({
                'margin-left': '200px'
            }, duration);

            $('#shop-productprofile').
                off('click.edit-product', 'a.js-action').
                on('click.edit-product', 'a.js-action', function() {
                    return self.editClick($(this));
                });

        },

        profileAction: function() {
            this.path.mode = 'profile';
        },

        disableSkus: function(virtual, disabled) {
            var target = $(this.options.form_selector).find('.s-product-skus');
            if (virtual) {
                if (disabled) {
                    target.find('.s-sku-virtual').hide().find('input').attr('disabled', true);
                } else {
                    target.find('.s-sku-virtual').show().find('input').attr('disabled', false);
                }
            } else {
                if (disabled) {
                    target.hide();
                } else {
                    target.show();
                }
                target.find('input').attr('disabled', disabled);
            }
        },

        onSkuTypeChange: function(sku_type) {
            var feature_superposition = $('#s-product-feature-superposition-field-group');
            var product_skus = $(this.options.form_selector).find('.s-product-skus tbody');

            // selectable features case
            if (sku_type == '1') {
                feature_superposition.show();
                feature_superposition.find('input').attr('disabled', false);

                if ($.product.path.id == 'new') {
                    $.product.disableSkus(false, true);
                } else {
                    $.product.disableSkus(true, false);
                }

            // flat sku case
            } else {
                feature_superposition.hide();
                feature_superposition.find('input').attr('disabled', true);
                //product_skus.find('.alist .all-skus').hide();

                if ($.product.path.id == 'new') {
                    $.product.disableSkus(false, false);
                } else {
                    $.product.disableSkus(true, true);
                    // empty skus - emulate add new sku
                    if (!product_skus.find('tr:not(.s-sku-virtual)').length) {
                        $.product.editTabMainSkuAdd();
                        // make default
                        product_skus.find('tr:not(.s-sku-virtual):first').find('input[name="product[sku_id]"]').attr('checked', true);
                    }
                }
            }
        },

        // feature superposition (selectable features) handlers
        featureSelectableInit: function() {
            var form = $(this.options.form_selector);
            var feature_superposition = $('#s-product-feature-superposition');
            var product_skus = form.find('.s-product-skus');

            // change salling mode (sku type)
            var sku_type = $.product.getSkyType();
            $.product.onSkuTypeChange(sku_type);
            form.on('change', 'input[name="product[sku_type]"]', function() {
                $.product.onSkuTypeChange(this.value);
            });

            // click to feature item
            feature_superposition.on('click', 'ul.features>li', function() {
                // make selected
                var li = $(this);
                li.parent().find('li.selected').removeClass('selected');
                li.addClass('selected');

                // show proper div with values
                var feature_id = li.attr('data-feature-id');
                var feature_values = feature_superposition.find('.feature-values[data-feature-id=' + feature_id + ']');
                feature_superposition.find('.feature-values').hide();
                feature_values.show();

                return false;
            });

            // click to feature value checkbox
            feature_superposition.on('change', 'ul.values>li input', function() {

                var self = $(this);
                var li = self.parents('li:first');
                var ul = li.parent();
                var count = ul.find('>li input:checked').length;

                // update count
                var feature_li = feature_superposition.find('ul.features li.selected');
                feature_li.find('.count').text(count || '');

                // update icon
                var icon_class = count ? 'status-blue-tiny' : 'status-gray-tiny';
                feature_li.find('i').
                    removeClass('status-blue-tiny status-gray-tiny').
                    addClass(icon_class);

                updateSuperpositionCount();
            });

            // if at least one input of sku is changed this sku turn into not virtual
            product_skus.on('change', 'input, textarea', function() {
                var self   = $(this);
                // ignore defulat sku ID
                if (self.attr('name') == 'product[sku_id]') {
                    return;
                }
                var sku_tr = self.parents('tr:first');
                if (!sku_tr.length) {
                    return;
                }
                var sku_id = parseInt(sku_tr.attr('data-id'), 10);
                if (!sku_id) {
                    return;
                }
                if (sku_tr.hasClass('js-sku-settings')) {
                    sku_tr = product_skus.find('tr[data-id='+sku_id+']:first');
                    if (!sku_tr.length) {
                        return;
                    }
                }
                sku_tr.find('input.s-input-virtual').val(0);
                sku_tr.removeClass('s-sku-virtual');

                $('#s-product-view').find('tr[data-id='+sku_id+']').removeClass('s-sku-virtual');
            });

            // update superposition count texts helper
            var updateSuperpositionCount = function() {
                var factors = [];
                feature_superposition.find('ul.features>li').each(function() {
                    var li  = $(this);
                    var cnt = parseInt(li.find('.count').text(), 10);
                    if (cnt) {
                        factors.push(cnt);
                    }
                });

                var counter = feature_superposition.find('.superposition-count');
                if (factors.length) {
                    counter.find('.options').text(factors.join(' x ') + ' ' + $_('options'));

                    var count = 1;
                    for (var i = 0, n = factors.length; i < n; i += 1) {
                        count *= factors[i];
                    }
                    counter.find('.skus').html(
                        '<span class="highlighted">' + $_('%d SKUs in total').replace('%d', count) + '</span>'
                    );

                } else {
                    counter.find('.options').text('');
                    counter.find('.skus').html('');
                }
            };
        },

        editInit: function() {
            // check rights
            if (!this.options.edit_rights) {
                location.hash = '#/product/' + this.path.id + '/';
                return false;
            }
            var form = $(this.options.form_selector);
            form.bind('submit.product', function(e) {
                return $.product.saveData('profile', null);
            });
            form.on('change.product, keyup.product', 'div.s-product-form:not(.ajax) :input', function(e) {
                $.product.helper.onChange($(this).parents('div.s-product-form'));
            });
            form.on('change.product, keyup.product, keypress.product', ':input[name="product\[name\]"]', function(e) {
                $.product.helper.onNameChange($(this), false, $.product.options.update_delay || 500);
            });

            var product_tags = $('#product-tags');
            if (!product_tags.data('tags_input_init')) {
                product_tags.tagsInput({
                    autocomplete_url: '?module=product&action=tagsAutocomplete',
                    height: 120,
                    defaultText: ''
                }).data('tags_input_init', true);
            }

            form.on('change.product', '.s-product-currency', function() {
                var $self = $(this), val = $self.val();
                form.find('.s-product-currency').val(val);
                form.find('.s-product-currency-readonly').text(val);
                $('#s-product-currency-code').val(val);
            });

            form.on('change.product', ':input[name="product\[type_id\]"]', function() {
                return $.product.editTabMainTypeChange($(this));
            });

            form.on('change', 'select[name="product[status]"]', function () {
                if ($(this).val() == '1') {
                    $(this).prev().removeClass('no-bw').addClass('yes');
                    $('.s-product-status-text').hide();
                } else {
                    $(this).prev().removeClass('yes').addClass('no-bw');
                    $('.s-product-status-text').show();
                }
            });

            this.featureSelectableInit();
            this.categoriesInit();

        },
        categoriesInit: function() {
            $('.hide_categories').on('click',function() {
                 $('.categories_checkbox').hide();
                 $('.change_categories').show();
                 $('.categories_list').show();
                 var cat_list = '';
                 $("[name='product[categories][]']:checked").each(function() {
                     cat_list += $(this).parent().text() + '<br/>';
                 });
                 $('.categories_list').each(function(){
                     $(this).html(cat_list);
                 });
                 return false;
            });
            $('.change_categories').on('click',function() {
                 $('.categories_list').hide();
                 $('.change_categories').hide();
                 $('.categories_checkbox').show();
                 return false;
            });
        },

        editFocus: function() {
            var duration = this.options.duration;
            var self = this;
            $('h1 .s-product-edit-link, #mainmenu .s-level2, #s-product-frontend-links').hide();
            $('#s-sidebar, #s-toolbar').animate({
                width: 0
            }, duration).queue(function() {
                $(this).hide();
                $(this).dequeue();
                // show product navigation menu
                $('#s-product-edit-menu, #s-product-edit-forms, #s-product-edit-save-panel').show();
                if (self.path.id != 'new') {
                    self.get('container').find('.back').attr('href', '#/product/' + self.path.id + '/');
                } else {
                    self.get('container').find('.back').attr('href', '#/' + $.products.list_hash);
                }
                // hide profile page and show editing forms
                $('#s-product-profile-page').hide();
                self.switchSubMenu('productprofile');
            });

            // stretch product page for the entire width
            $('#maincontent').animate({
                'margin-top': '40px'
            }, duration);
            $('#s-content').animate({
                'margin-left': 0
            }, duration);

            $('#shop-productprofile').
                off('click.edit-product', 'a.js-action').
                on('click.edit-product', 'a.js-action', function() {
                    return self.editClick($(this));
                });
        },

        editBlur: function() {
            this.path.tab = false;
            this.path.mode = false;
            $($.product.options.form_selector).off('submit.product');
            $(this.options.form_selector).off('change.product, keyup.product');
            $('#s-product-edit-forms').off('click.edit-product');
        },

        /**
         *
         * @param {'id':int,'mode':String,'tab':String} path
         */
        editAction: function(path) {
            this.path.mode = path.mode;
        },

        /**
         *
         * @method edit%Tab%Init after first loading or force reloaded content
         * @method edit%Tab%Focus Tab get focus
         * @method edit%Tab%Action Tab interactions (provide extra params into tab)
         * @method edit%Tab%Blur Tab leave focus
         * @method edit%Tab%* Tab "namespace" for internal purpose functions
         *
         */

        editTabMainData: {
            'sku_id': -1,
            'stocks': {}
        },

        editTabMainInit: function(path) {
            $('#s-product-type').each(function() {
                if ($(this).parent().get(0) != document.body) {
                    $('body > #s-product-type').remove();
                    $(document.body).append($(this));
                }
            });
            var main_tab_content = $('#s-product-edit-forms .s-product-form.main');
            var self = this;
            var $table = main_tab_content.find('table.s-product-skus:last > tbody');
            $table.sortable({
                distance: 5,
                helper: 'original',
                items: '> tr',
                handle: 'i.sort',
                opacity: 0.75,
                tolerance: 'pointer',
                update: function(event, ui) {
                    var id = parseInt($(ui.item).data('id'), 10);
                    var after_id = $(ui.item).prev().data('id');
                    if (after_id === undefined) {
                        after_id = 0;
                    } else {
                        after_id = parseInt(after_id, 10);
                    }
                    self.editTabMainSkuSort(id, after_id, $(this));
                    var $s = $table.find('> tr.js-sku-settings[data-id="' + id + '"]');
                    if ($s.length) {
                        var $settings = $s.detach();
                        $.shop.trace('detach', $settings);
                        if ($settings) {
                            $.shop.trace('detach', $table.find('> tr[data-id="' + id + '"]').length);
                            $table.find('> tr[data-id="' + id + '"]:first').after($settings);
                        }
                    }
                },
                start: function(event, ui) {
                    $table.find('> tr.js-sku-settings').hide();
                },
                stop: function(event, ui) {
                    $table.find('> tr.js-sku-settings').show();
                }
            });

            var frontend_url = $('#s-product-frontend-url');
            frontend_url.inlineEditable({
                editLink: '#s-product-frontend-url-edit-link',
                editOnItself: false,
                minSize: {
                    height: 15,
                    width: 100
                },
                makeReadableBy: [],
                beforeMakeEditable: function(input) {
                    var self = $(this);
                    var parent_div = self.parents('div:first');
                    var slash = parent_div.find('span.slash');
                    var new_window = parent_div.find('i.new-window');
                    $(input).after(slash);
                    new_window.hide();

                    parent_div.find('span.s-frontend-base-url').html(parent_div.find('a.s-frontend-base-url').hide().contents()).show();
                },
                beforeBackReadable: function(input, data) {
                    var self = $(this);
                    var parent_div = self.parents('div:first');
                    var slash = parent_div.find('span.slash');
                    var new_window = parent_div.find('i.new-window');
                    self.after(slash);
                    new_window.show();

                    parent_div.find('a.s-frontend-base-url').html(parent_div.find('span.s-frontend-base-url').hide().contents()).show();
                }
            });
            if (!parseInt(path.id, 10)) {
                frontend_url.trigger('editable');
            }

            main_tab_content.off('change.product', 'select.s-product-categories').on('change.product', 'select.s-product-categories', function(e) {
                var self = $(this);
                var val = self.val();
                var parent = self.parent();
                var del_button = parent.find('.s-product-delete-from-category');

                if (!parseInt(val, 10)) {
                    del_button.hide();
                } else {
                    del_button.show();
                }

                // create new category functionality
                if (val == 'create') {
                    parent.find('.s-new-category').show();
                    parent.find('input.val').attr('disabled', false);
                    self.hide().attr('disabled', true).addClass('js-ignore-change');
                } else {
                    parent.find('input.val').val(parseInt(val, 10) || 0);
                }
            });

            // Enter-press handler when foucus on input
            main_tab_content.off('keydown.product', 'input.new-category').on('keydown.product', 'input.new-category', function(e) {
                if (e.keyCode == 13) {
                    $(this).parent().find('input[type=button]').click();
                    return false;
                }
            });

            // saving new category
            main_tab_content.off('click.product', '.s-new-category input[type=button]').on('click.product', '.s-new-category input[type=button]', function(e) {
                var self = $(this).parent();
                var parent = self.parent();
                var input = self.find('input[name=new_category]');
                var value = input.val();
                $.shop.jsonPost('?module=products&action=saveListSettings&category_id=0&parent_id=0', {
                    name: value
                }, function(r) {
                    var select = parent.find('select');
                    var place = select.find('option.separator:first').show();
                    $.when(place.after('<option class="category" value="' + r.data.id + '">' + r.data.name + '</option>')).then(function() {
                        select.find('option:first').text($_('Please select a category'));
                        select.val(r.data.id).attr('disabled', false).show().removeClass('js-ignore-change');
                        self.find('input.val').val(r.data.id).attr('disabled', true);
                        self.hide();
                        parent.find('.s-product-delete-from-category').show();
                        input.val('');
                        $.product.helper.onTabChanged('main', true);
                        $('#s-product-save-button').removeClass('green').addClass('yellow');
                        $('#s-category-list>ul').trigger('add', [r.data, 'category']);
                    });
                });
            });

            // delete category
            main_tab_content.
                off('click.product', '.s-product-delete-from-category').
                on('click.product', '.s-product-delete-from-category',
                    function() {
                        var self = $(this);
                        var parent = self.parent();
                        var select = parent.find('select');

                        var categories = $('#s-product-edit-forms .s-product-form.main select.s-product-categories');
                        if (categories.length > 1) {
                            select.attr('disabled', true);
                            parent.remove();
                        } else {
                            select.val('selected').attr('disabled', false);
                            parent.find('input.val').val(0).attr('disabled', true).parent().hide();
                            parent.find('.s-product-delete-from-category').hide();
                        }
                        return false;
                    }
                );
        },
        editTabMainAction: function(path) {
            var selector = false;
            var name = null;
            if (path && path.params && path.params.focus) {
                name = path.params.name || '';
                if (!name.length) {
                    if (path.params.sku) {
                        name = 'product[skus][' + parseInt(path.params.sku, 10) + ']';
                        if (path.params.focus) {
                            name += '[' + path.params.focus + ']';
                        }
                        if (path.params.focus == 'stock') {
                            name += '[' + (parseInt(path.params.stock, 10) || 0) + ']';
                        }
                    }
                }
                selector = ':input[name$="' + name.replace(/(\[|\]|\|\-)/g, '\\$1') + '"]:first';
            } else if (path && path.id == 'new') {
                selector = ':input[name$="\[name\]"]:first';
            }
            if (selector) {
                $.shop.trace('$.product.editTabMainFocus', [name, $(selector).length]);
                setTimeout(function() {
                    $(selector).focus();
                    window.location.hash = '#/product/' + path.raw.replace(/\/focus=.*$/, '/');
                }, 100);
            }
        },
        editTabMainBlur: function() {
        },
        editTabMainSave: function() {
            if (this.call('editTabMainSkuEproductSave') === false) {
                return false;
            }
        },

        helper: {
            options: {
                'tab_changed': '<i class="icon10 status-yellow-tiny"></i>'
            },

            data: {
                url_helper: {
                    url: '',
                    name: '',
                    timer: null
                }
            },
            init: function() {
                this.data.url_helper = {
                    url: '',
                    name: '',
                    timer: null
                };
            },
            onTabChanged: function(tab, changed) {

                $.shop.trace('$.product.onChange id=' + tab + ' changed=' + changed);
                $('#s-product-edit-menu li.' + tab + ' .s-product-edit-tab-status').html(changed ? this.options.tab_changed : '');
            },

            /**
             * Get current product type id
             *
             * @param {} type
             * @return {}
             */
            type: function(type) {
                return parseInt(type, 10) || parseInt($('#s-product-edit-forms .s-product-form.main :input[name="product\[type_id\]"]').val(), 10) || 0;
            },

            onNameChange: function(element, animate, delay) {
                if (this.data.url_helper.timer) {
                    clearTimeout(this.data.url_helper.timer);
                }
                var target = $($.product.options.form_selector).find(':input[name="product\[url\]"]');
                var parent = target.parent();
                if (($.product.path.id && ($.product.path.id != 'new')) || (target.val() != this.data.url_helper.url)) {
                    $.shop.trace('$.product.onNameChange stop ' + this.data.url_helper.url + ' != ' + target.val());
                    $($.product.options.form_selector).off('.product', ':input[name="product\[name\]"]');
                    parent.find('.js-url-helper').hide();
                } else {
                    if (animate) {
                        if (!parent.find('.js-url-helper').length) {
                            parent.append('<i class="icon16 loading js-url-helper"></i>');
                        } else {
                            parent.find('.js-url-helper').show();
                        }
                    }
                    var self = this;
                    this.data.url_helper.timer = setTimeout(function() {
                        self.urlHelper(element, target, delay);
                    }, delay || 500);

                }
            },
            onChange: function(container) {
                var changed = this.checkChanges(container.parents('form'), false);
                var id = this.getContainerId(container);

                /**
                 * @todo update class on state change only
                 */
                $.shop.trace('$.product.onChange changed=' + changed);
                $('#s-product-edit-save-panel :submit').removeClass(changed ? 'green' : 'yellow').addClass(changed ? 'yellow' : 'green');
                if (changed) {
                    changed = this.checkChanges(container, false);
                }
                this.onTabChanged(id, changed);
            },
            urlHelper: function(element, target) {
                if (this.data.url_helper.timer) {
                    clearTimeout(this.data.url_helper.timer);
                }
                var data = {
                    'str': $(element).val()
                };
                $.shop.trace('$.product.urlHelper ', data);
                if (data.url != this.data.url_helper.name) {
                    var self = this;
                    this.data.url_helper.url = data.url;
                    $.ajax({
                        'url': '?action=transliterate',
                        'data': data
                    }).done(function(response) {
                        if ((response = $.parseJSON(response)) && (response.status == "ok")) {
                            self.data.url_helper.url = response.data;
                            target.val(response.data);
                            target.parent().find('.js-url-helper').hide();
                        }
                    });
                } else {
                    target.parent().find('.js-url-helper').hide();
                }
            },
            getValueByName: function(data, name) {
                var value = data;
                var chunk, chunks = name.replace(/\]/, '').split('[');
                while (chunk = chunks.shift()) {
                    if (value[name] !== undefined) {
                        value = value[name];
                    } else {
                        value = '';
                        break;
                    }
                }
                $.shop.trace('$.product.helper.getValueByName', [value, name, data]);
                return value;
            },
            checkChanges: function($container, update) {
                /**
                 * @todo add update relataed text tags
                 * @todo extract it into separate plugin
                 */
                var changed = false;
                var self = this;
                var selector = ':input:not(.js-ignore-change)';
                if ($container.hasClass('s-product-form')) {
                    if ($container.hasClass('ajax')) {
                        return false;
                    }
                } else {
                    selector = '.s-product-form:not(.ajax) ' + selector;
                }
                $container.find(selector).each(function() {
                    var type = ($(this).attr('type') || this.tagName).toLowerCase();
                    switch (type) {
                        case 'input':/* stuped case */
                        case 'text':
                        case 'textarea': {
                            if (this.defaultValue != this.value) {
                                changed = true;
                                if (update) {
                                    this.defaultValue = this.value;
                                    self.updateInput(this.name, this.value, type == 'textarea');
                                }
                            }
                            break;
                        }
                        case 'radio':
                        case 'checkbox': {
                            if (this.defaultChecked != this.checked) {
                                changed = true;
                                if (update) {
                                    this.defaultChecked = this.checked;
                                }
                            }
                            break;
                        }
                        case 'select': {
                            if (this.length) {
                                $(this).find('option').each(function() {
                                    if (this.defaultSelected != this.selected) {
                                        changed = true;
                                        if (update) {
                                            this.defaultSelected = this.selected;
                                        }
                                    }
                                    return update || !changed;
                                });
                            }
                            break;
                        }
                        case 'file': {
                            if (this.value) {
                                changed = true;
                                if (update) {
                                    this.value = null;
                                }
                            }
                            break;
                        }
                        case 'reset':
                        case 'button':
                        case 'submit': {
                            // ignore it
                            break;
                        }
                        case 'hidden': {
                            // do nothing
                            break;
                        }
                        default: {
                            $.shop.error('$.product.checkChanges unsupported type ' + type, [type, this]);
                            break;
                        }
                    }
                    if (!update && changed) {
                        $.shop.trace('$.product.helper.checkChanges', [this, changed]);
                    }
                    return update || !changed;
                });
                return changed;
            },
            getContainerId: function(container) {
                var c = ($(container).attr('class') || '').split(' ');
                var id = false;
                for (var i in c) {
                    if (c[i] != 's-product-form') {
                        id = c[i];
                        break;
                    }
                }
                return id;
            },
            updateInput: function(name, value, html, id) {
                if (name) {
                    var selector = '.s-' + name.replace(/\[(.+?)\]/g, '-$1') + '-input';
                    $.shop.trace('update field: ' + name + ' ' + selector + ' value=' + value);
                    if (html) {
                        $(selector).html(value);
                    } else {
                        $(selector).text(value);
                    }
                    if (id) {
                        var input_name = $(selector).attr('name');
                        input_name = input_name.replaceAll(/\[-[\d]+\]/, '[' + id + ']');
                        $.shop.trace('$.product.helper.updateInput name', [input_name]);
                    }
                }
            },
            count: function(obj) {
                var size = 0;
                for (var key in obj) {
                    if (obj.hasOwnProperty(key))
                        size++;
                }
                return size;
            },

            loadScript: function(src) {
                var name  = src.replace(/^.*\//, '');
                var count = 10;
                if (!$.product.ajax.cached[name]) {
                    $.ajax({
                        url: wa_url + src,
                        dataType: "script",
                        cache: true,
                        complete: function(jqXHR, textStatus) {
                            if (textStatus == 'success') {
                                $.product.ajax.cached[name] = true;
                                $.shop.trace('$.product.helper.loadScript loaded', [name, src]);
                            } else {
                                $.shop.trace('$.product.helper.loadScript error', [textStatus, name]);
                                count -= 1;
                                if (count > 0) {
                                    setTimeout(function() {
                                        $.product.helper.loadScript(src);
                                    }, 200);
                                }
                            }
                        }
                    });
                }
            }
        },

        multiSkus: function(count) {
            var table = $('#s-product-edit-forms .s-product-form.main table.s-product-skus:first');
            if (count > 1) {
                table.find('thead tr').show();
                table.find('.s-name,.s-sku-sort').show('slow');
                if (count == 2) {
                    table.find('> tbody:first > tr:first .s-name :input').focus();
                } else {
                    table.find('> tbody:first > tr:last .s-name :input').focus();
                }
            } else {
                table.find('thead tr').hide();
                table.find('.s-name,.s-sku-sort').hide();
            }
        },

        editTabMainSkuAdd: function() {
            try {
                var $table = $('#s-product-edit-forms .s-product-form.main table.s-product-skus:first');
                var $skus = $table.find('tbody:first');
                var price = 0;

                $skus.find(':input[name$="\[price\]"]').each(function() {
                    price = Math.max(price, parseFloat($(this).val()) || 0);
                });
                var purchase_price = 0;
                $skus.find(':input[name$="\[purchase_price\]"]').each(function() {
                    purchase_price = Math.max(purchase_price, parseFloat($(this).val()) || 0);
                });

                $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length + 1);

                //$skus.parents('table').find('tr:hidden').show();
                var sku = {
                    'id': --$.product.editTabMainData.sku_id,
                    'sku': '',
                    'available': 1,
                    'name': '',
                    'price': '' + price,
                    'purchase_price': '' + purchase_price,
                    'stock_icon': {
                        0: "<i class='icon10 status-green' ></i>"
                    },
                    'stock': {},
                    'count': null

                };
                $.shop.trace('$.product.editTabMainSkuAdd', [$.product.editTabMainData.sku_id, sku]);

                $skus.append(tmpl('template-sku-edit', {
                    'sku_id': $.product.editTabMainData.sku_id,
                    'sku': sku,
                    'stocks': this.getData('main', 'stocks')
                }));
                $skus.find('.s-product-currency').trigger('change');

            } catch (e) {
                $.shop.error(e.message, e);
            }
            return false;
        },

        editTabMainSkuSort: function(id, after_id, $list) {
            try {
                $.post('?module=product&action=skuSort', {
                    product_id: this.path.id,
                    sku_id: id,
                    after_id: after_id
                }, function(response) {
                    $.shop.trace('$.product.editTabMainSkuSort result', response);
                    if (response.error) {
                        $.shop.error('Error occurred while sorting product SKUs', 'error');
                        $list.sortable('cancel');
                    }
                }, function(response) {
                    $.shop.trace('$.product.editTabMainSkuSort cancel', {
                        'data': response
                    });
                    $list.sortable('cancel');
                    $.shop.error('Error occurred while sorting product SKUs', 'error');
                });
            } catch (e) {
                $.shop.error(e.message, e);
            }
            return false;
        },

        editTabMainProductDelete: function(el) {
            var showDialog = function() {
                $('#s-product-list-delete-products-dialog').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function() {
                        $(this).find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function(d) {
                        $(this).find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost('?module=products&action=deleteList', {
                            product_id: [$.product.path.id],
                            get_lists: 1
                        }, function(r) {
                            if ($.product_list) {
                                $('#s-sidebar').trigger('update', r.data.lists);
                            }
                            d.trigger('close');
                            location.hash = '#/products/';
                        });

                        return false;
                    }
                });
            };
            var d = $('#s-product-list-delete-products-dialog');
            var p = d.parent();
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
            }
            p.load('?module=dialog&action=productsDelete&count=' + 1, showDialog);
            return false;
        },

        /**
         *
         * @param {Integer} sku_id
         * @param {jQuery} $el
         * @todo real sku delete
         */
        editTabMainSkuDelete: function(sku_id, $el) {
            var $table = $('#s-product-edit-forms .s-product-form.main table.s-product-skus:first');
            var $skus = $table.find('tbody:first');

            var $sku = $el.parents('tbody').find('> tr[data-id="' + sku_id + '"]');
            var self = this;
            if (sku_id > 0) {
                var skus_count = $el.parents('tbody').find('tr[data-id]:not(.js-sku-settings):not([data-id^="-"])').length;
                if (skus_count > 1) {
                    $.ajax({
                        'url': '?module=product&action=skuDelete',
                        'data': {
                            'sku_id': sku_id,
                            'product_id': this.path.id
                        },
                        'dataType': 'json',
                        'type': 'post',
                        success: function(response) {
                            if (response.status == 'fail') {
                                self.refresh('error', response.errors);
                            } else if (response.data.redirect) {
                                window.location.href = response.data.redirect;
                            } else {
                                self.refresh('success', response.data.message || 'Success');
                                $sku.hide('normal', function() {
                                    $sku.remove();
                                    $('#s-product-view table.s-product-skus > tbody > tr[data-id="' + sku_id + '"]').remove();
                                    $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length);
                                });
                                $('#s-product-edit-forms .s-product-form.main').find('input[name=product\\[sku_id\\]][value=' + response.data.sku_id + ']')
                                .attr('checked', true);
                            }
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            self.refresh('error', textStatus);
                        }
                    });
                } else {
                    self.refresh('error', $_('At least one SKU per product must exists'));
                }

            } else {
                $sku.hide('normal', function() {
                    $sku.remove();
                    $('#s-product-view table.s-product-skus > tbody >tr[data-id="' + sku_id + '"]').remove();
                    $.product.multiSkus($skus.find('tr:not(.js-sku-settings)').length);
                });
            }
        },
        
        editTabMainCategoriesAdd: function() {
            var control = $('#s-product-edit-forms .s-product-form.main select.s-product-categories:last').parent();
            var clone = control.clone(false);
            clone.find('select').val('select').attr('disabled', false).show();
            clone.find('input.val').val(0).attr('disabled', true).parent().hide();
            clone.find('.s-product-delete-from-category').hide();
            control.after(clone);
        },

        editTabMainSkuStock: function(sku_id, $el) {
            var $container = $('#s-product-sku-' + sku_id);
            $container.hide().find(':input:enabled').attr('disabled', true);

            var $stock_container = $('#s-product-sku-stock-' + sku_id);
            $stock_container.show().find(':input:disabled').removeAttr('disabled');
            $stock_container.find(':input:first').val($container.find(':input:first').val());
        },

        editTabMainSkuSettings: function(sku_id, $el) {
            $el.hide();
            var $sku = $el.parents('tr');
            var sku = $sku.data();
            var self = this;
            $.when($sku.after(tmpl('template-sku-settings', {
                'sku_id': sku_id,
                'sku': sku
            }))).done(function() {
                var url = '?module=product&action=skuSettings';
                url += '&product_id=' + self.path.id;
                url += '&sku_id=' + sku_id;
                var $target = $('#s-product-edit-forms .s-product-form.main tr.js-sku-settings[data-id="' + sku_id + '"] > td:first');
                $target.load(url, function() {
                    $sku.find(':input[name$="\[available\]"]').remove();
                    if (sku_id > 0) {
                        $.shop.trace('fileupload', [$target.find('.fileupload').length, typeof($target.find('.fileupload').fileupload)]);
                        try {
                            var matches = document.cookie.match(new RegExp("(?:^|; )_csrf=([^;]*)"));
                            var csrf = matches ? decodeURIComponent(matches[1]) : '';

                            $target.find('.fileupload:first').fileupload({
                                dropZone: null,
                                url: '?module=product&action=skuEproductUpload',
                                acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                                start: function() {
                                    $target.find('.fileupload:first').hide();
                                },
                                progress: function(e, data) {
                                    $.shop.trace('fileupload progress', data);
                                    var $progress = $target.find('.js-progressbar-container');
                                    $progress.show();
                                    $progress.find('.progressbar-inner:first').css('width', Math.round((100 * data.loaded / data.total), 0) + '%');

                                },
                                done: function(e, data) {
                                    $.shop.trace('fileupload done', [data.result, typeof(data.result)]);
                                    var file = (data.result.files || []).shift();
                                    $target.find('.js-progressbar-container').hide();
                                    if (!file || file.error) {
                                        $target.find('.error-message').text(file.error).show();
                                        $target.find('.fileupload:first').addClass('error').show();
                                    } else {
                                        var attachment_block = $target.find('.s-sku-attachment');
                                        attachment_block.find('input.s-input-file-name').val(file.name);
                                        attachment_block.find('.s-file-name').text(file.name);
                                        attachment_block.find('.s-file-size').text(file.size);
                                        attachment_block.find('.s-file-description').val('');
                                        attachment_block.find('input[type=checkbox]').attr('checked', true);
                                        attachment_block.show();

                                        $sku.find('input.s-input-virtual').val(0);
                                        /*
                                        $target.find('.value .hint').text(file.name + ' ' + file.size);
                                        $target.find('.value :checkbox[name$="\[eproduct\]"]').attr('checked', true);
                                        */

                                    }

                                },
                                fail: function(e, data) {
                                    $.shop.trace('fileupload fail', [data.textStatus, data.errorThrown]);
                                    $target.find('.error-message').text('error').show().text(data.errorThrown || 'error');
                                    $target.find('.js-progressbar-container').hide();
                                    $target.find('.fileupload:first').addClass('error').show();
                                },
                                formData: {
                                    'product_id': $.product.path.id,
                                    'sku_id': sku_id,
                                    '_csrf': csrf
                                }
                            });
                        } catch (e) {
                            $.shop.error('Exception ' + e.message, e);
                        }
                    }
                });

            });
        },

        editTabMainSkuImageSelect: function(sku_id, image_id, $el) {
            var li       = $el.parents('li:first');
            var selected = li.hasClass('selected');
            var parent   = $el.parents('div.value:first');

            parent.find('ul.s-product-image-crops li.selected').removeClass('selected');
            if (!selected) {
                li.addClass('selected');
                parent.find('input[name$="\[image_id\]"]').val(image_id);
            } else {
                parent.find('input[name$="\[image_id\]"]').val(0);
            }

            $.shop.trace('$.product.editTabMainSkuImageSelect', [parent, parent.find(':input[name$="\[image_id\]"]')]);
            $.product.helper.onChange($el.parents('div.s-product-form'));
        },

        editTabMainSkuEproductSave: function(sku_id) {
            // upload eproduct files for existing skus
            var $sku_files = $('#s-product-edit-forms .s-product-form.main tr.js-sku-settings' + ((sku_id && sku_id > 0) ? ('[data-id="' + sku_id + '"]') : '')
            + ' > td:first .fileupload');
            $.shop.trace('$.product.editTabMainSkuEproductSave', $sku_files.length);
            if ($sku_files.length) {
                $sku_files.fileupload('start');
            }

        },

        editTabMainSkuEproductDelete: function(sku_id) {

        },

        editTabMainLinkEdit: function($el) {
            return false;
        },

        /**
         * Show select input for change product type
         */
        editTabMainTypeSelect: function($el) {
            var $container = $el.parents('form').find(':input[name="product\[type_id\]"]').parents('.value');
            if (this.path.tab == 'main') {
                $el.hide();
            } else {
                $container.find('.js-action').hide();
                window.location.hash = '/product/' + this.path.id + '/' + this.path.mode + '/';
            }
            $container.find('.js-type-name').hide();
            $container.find(':input').show().focus();
            setTimeout(function() {
                $container.find(':input').focus();
            }, 100);
        },

        getSkyType: function() {
            var form = $(this.options.form_selector);
            var sku_type_input = form.find('input[name="product[sku_type]"]:first');
            var sku_type = '';
            if (sku_type_input.is(':radio')) {
                sku_type = form.find('input[name="product[sku_type]"]:checked').val();
            } else {
                sku_type = sku_type_input.val();
            }
            return sku_type;
        },

        editTabMainTypeChange: function($el) {

            var $container = $el.parents('.value');
            var $type = $el.find(':selected:first');
            var type = $type.val();
            var tab = 'features';
            var $tab_link;
            var href;

            $.shop.trace('debug', $el);
            if (type != $container.data('type')) {
                $container.find('.js-type-icon').html($type.data('icon'));
                $container.find('.js-type-name').html($type.text());

                var $tab = $('#s-product-edit-forms .s-product-form.' + tab);
                if ($tab.length && typeof(this.editTabFeaturesReload) != 'undefined') {
                    this.editTabFeaturesReload(type);
                } else {
                    $tab_link = $('#s-product-edit-menu > li.' + tab + ' > a');
                    href = '/features/' + type + '/';
                    $tab_link.attr('href', $tab_link.attr('href').replace(/\/features\/.*$/, href));
                }
            } else {
                $tab_link = $('#s-product-edit-menu > li.' + tab + ' > a');
                href = '/features/';
                $tab_link.attr('href', $tab_link.attr('href').replace(/\/features\/.*$/, href));
            }

            var sku_type = $.product.getSkyType();

            /*
            var sku_type_field_group = $('#s-sku-type-field-group');
            var currency_control = sku_type_field_group.find('.s-base-price-selectable-currency').contents();

            // ajax for features selectable
            sku_type_field_group.
                load(
                    '?module=product&action=featuresSelectable&id=' + $.product.path.id +
                    '&type_id='  + $type.val() +
                    '&sku_type=' + sku_type,
                    function() {
                        $('#s-sku-type-field-group').
                            find('.s-base-price-selectable-currency').
                            append(currency_control);
                        $.product.featureSelectableInit();
                    }
                );
                */

            // ajax for features selectable
            var currency_control = $(
                '#s-sku-type-field-group .s-base-price-selectable-currency'
            ).contents();
            $.get(
                '?module=product&action=featuresSelectable&id=' + $.product.path.id, {
                    type_id: $type.val(), sku_type: sku_type
                },
                function(html) {
                    var wrapper = $('<div></div>');

                    wrapper.html(html);
                    wrapper.find('.s-base-price-selectable-currency').append(currency_control);

                    $('#s-sku-type-field-group').replaceWith(
                        $('#s-sku-type-field-group', wrapper)
                    );

                    $('#s-product-feature-superposition-field-group').replaceWith(
                        $('#s-product-feature-superposition-field-group', wrapper)
                    );
                    $.product.featureSelectableInit();
                }
            );
        },

        editTabMainUpdate: function(data, features_selectable_strings, old_id) {

            var $skus = $('#s-product-edit-forms .s-product-form.main table.s-product-skus tbody');
            var $skus_view = $('#s-product-view table.s-product-skus tbody');
            $skus.find('tr[data-id^="\-"]').remove();
            $skus_view.find('tr[data-id^="\-"]').remove();
            $skus.parents('table').find('tr:hidden').show();

            // take into account sort field of skus
            var skus = [];
            for (var sku_id in data.skus || {}) {
                skus.push($.extend({ id: sku_id }, data.skus[sku_id]));
            }
            skus = skus.sort(function(a, b) {
                return a.sort - b.sort;
            });

            var html = '';

            // render skus in edit tab
            for (var i = 0, n = skus.length; i < n; i += 1) {
                html += tmpl('template-sku-edit', {
                    'sku_id':  skus[i].id,
                    'sku':     skus[i],
                    'stocks':  this.getData('main', 'stocks'),
                    'checked': skus[i].id == data.sku_id
                });
            }
            $skus.html(html);
            $skus.find('select.s-product-currency').val(data.currency);
            $skus.parent().show();
            this.multiSkus($skus.find('tr:not(.js-sku-settings)').length);

            // render skus in profile page
            html = '';
            for (var i = 0, n = skus.length; i < n; i += 1) {
                html += tmpl('template-sku', {
                    'sku_id': skus[i].id,
                    'sku':    skus[i],
                    'stocks': this.getData('main', 'stocks')
                });
            }
            $skus_view.html(html);

            if (!old_id || old_id == 'new') {
                $skus.parents('div.field-group:first').after(
                    $('#s-sku-type-field-group')
                );
            }

            if (features_selectable_strings) {
                var counter = $('#s-product-feature-superposition .superposition-count');
                counter.find('.options').text(features_selectable_strings.options);
                counter.find('.skus').html('<span class="highlighted">' + features_selectable_strings.skus + '</span>');
            }

            var pattern = /#\/product\/new\//;
            var replace = '#/product/' + data.id + '/';
            $('#s-product-edit-forms .s-product-form.main table.s-product-skus tbody, #s-product-view table.s-product-skus tbody')
            .find('[href*="#/product/new/"]').each(function() {
                $(this).attr('href', $(this).attr('href').replace(pattern, replace));
            });
        },

        editTabDescriptionsInit: function() {
            var scripts = [];
            scripts.push('wa-content/js/elrte/elrte.min.js');
            scripts.push('wa-content/js/elrte/elrte-wa.js');
            if (wa_lang != 'en') {
                scripts.push('wa-content/js/elrte/i18n/elrte.' + wa_lang + '.js');
            }

            for (var i = 0; i < scripts.length; i++) {
                $.product.helper.loadScript(scripts[i]);
            }
        },

        editTabPagesInit: function() {
            var scripts = [];
            scripts.push('wa-content/js/elrte/elrte.min.js');
            scripts.push('wa-content/js/elrte/elrte-wa.js');
            if (wa_lang != 'en') {
                scripts.push('wa-content/js/elrte/i18n/elrte.' + wa_lang + '.js');
            }

            for (var i = 0; i < scripts.length; i++) {
                $.product.helper.loadScript(scripts[i]);
            }
        },

        editTabDescriptionsBlur: function() {
            waEditorUpdateSource({
                id: 's-product-description-content'
            });
        },

        editTabDescriptionsAction: function () {
            var count = 10;
            (function init() {
                try {
                    if ($.product.ajax.cached['elrte-wa.js'] && $.product.ajax.cached['elrte.min.js']) {

                        var $element = $('#s-product-description-content');
                        $('#s-product-description').html(tmpl('template-product-description', {
                            description: $element.val()
                        }));
                        $element.remove();

                        waEditorInit({
                            id: 's-product-description-content',
                            prefix: 's-product-description-',
                            upload_url: "",
                            lang: wa_lang,
                            save_button: 's-product-save-button',
                            change_callback: function() {
                                if ($.product.path.tab == 'descriptions') {
                                    $.product.helper.onTabChanged($.product.path.tab, true);
                                }
                            }
                        });
                    } else {
                        count -= 1;
                        if (count > 0) {
                            $.shop.trace('$.product.editTabDescriptionsAction wait while js are loading', $.product.ajax);
                            setTimeout(function() {
                                init();
                            }, 500);
                        }
                    }
                } catch (e) {
                    console.error(e.message);
                    console.dir(e.trace);
                }
            })();
        },

        profileInit: function() {

            // wa_editor global variable, so has previous context
            if (wa_editor) {
                wa_editor = undefined;
            }

            if (this.options.edit_rights) {

                var $product_name = $('#shop-productprofile').find('.s-product-name');
                if (parseInt(this.path.id, 10)) {
                    $product_name.addClass('editable');
                } else {
                    $product_name.removeClass('editable');
                }

                $product_name.inlineEditable({
                    minSize: {
                        width: 150
                    },
                    maxSize: {
                        width: 550
                    },
                    inputClass: 's-title-h1-edit',
                    beforeMakeEditable: function() {
                        $('#s-edit-product').hide();
                    },
                    afterBackReadable: function(input, data) {
                        $('#s-edit-product').show();
                        if (!data.changed) {
                            return false;
                        }
                        $.shop.jsonPost('?module=product&action=save&id=' + $.product.path.id, {
                            update: {
                                name: $(input).val()
                            }
                        }, function() {
                            document.title = $(input).val() + $.product.options.title_suffix;
                        });
                    },
                    hold: function() {
                        return !$(this).hasClass('editable');
                    }
                });
            }
            var self = this;

            setTimeout(function() {
                self.call('profileLazyInit', []);
            }, 2000);

        },
        profileLazyInit: function() {
            if (!$('#product-sales-plot').empty().length) {
                return;
            }
            if (!$('#product-sku-plot').empty().length) {
                return;
            }
            if (sales_plot_data && sales_plot_data.length) {
                $.jqplot('product-sales-plot', sales_plot_data, {
                    seriesColors: ["#3b7dc0", "#129d0e", "#a38717", "#ac3562", "#1ba17a", "#87469f", "#6b6b6b", "#686190", "#b2b000", "#00b1ab", "#76b300"],
                    grid: {
                        borderWidth: 0,
                        shadow: false,
                        background: '#ffffff',
                        gridLineColor: '#eeeeee'
                    },
                    series: [{
                                color: '#129d0e',
                                yaxis: 'y2axis',
                                shadow: false,
                                lineWidth: 3,
                                fill: true,
                                fillAlpha: 0.1,
                                fillAndStroke: true,
                                markerOptions: {
                                    show: false
                                },
                                rendererOptions: {
                                    highlightMouseOver: false
                                }
                            }],
                    axes: {
                        y2axis: {
                            min: 0,
                            tickOptions: {
                                markSize: 0
                            }
                        },
                        xaxis: {
                            // renderer:$.jqplot.DateAxisRenderer,
                            pad: 1,
                            showTicks: false
                        }
                    },
                    highlighter: {
                        lineWidthAdjust: 12.5
                    }
                });
            } else {
                $('#product-sales-plot').remove();
            }
            if (sku_plot_data && sku_plot_data.length && sku_plot_data[0] && sku_plot_data[0].length) {

                $.jqplot('product-sku-plot', sku_plot_data, {
                    seriesColors: ["#0077CC", "#33BB11", "#EE5500", "#EEBB11", "#44DDDD", "#6b6b6b", "#686190", "#b2b000", "#00b1ab", "#76b300"],
                    grid: {
                        borderWidth: 0,
                        background: '#ffffff',
                        shadow: false
                    },
                    legend: {
                        show: true,
                        location: 's'
                    },
                    seriesDefaults: {
                        shadow: false,
                        renderer: $.jqplot.PieRenderer,
                        rendererOptions: {
                            padding: 0,
                            sliceMargin: 1,
                            showDataLabels: false
                        }
                    }
                });
            } else {
                $('#product-sku-plot').remove();
            }
        }

    };
})(jQuery);
;
(function($) {
    $.fn.rateWidget = function(options, ext, value) {

        var settings;
        var self = this;
        if (!this || !this.length) {
            return;
        }

        if (typeof options == 'string') {
            if (options == 'getOption') {
                if (ext == 'rate') {
                    return parseInt(this.attr('data-rate'), 10);
                }
            }
            if (options == 'setOption') {
                if (ext == 'rate') {
                    update.call(this, parseInt(value, 10));
                    ext = {
                        rate: value
                    };
                }
                if (typeof ext === 'object' && ext) {
                    settings = this.data('rateWidgetSettings') || {};
                    $.extend(settings, ext);
                    if (typeof ext.hold !== 'undefined' && typeof ext.hold !== 'function') {
                        settings.hold = _scalarToFunc(settings.hold);
                    }
                }
            }
            return this;        // means that widget is installed already
        }

        this.data('rateWidgetSettings', $.extend({
            onUpdate: function() {},
            rate: null,
            hold: false,
            withClearAction: true
        }, options || {}));

        if (this.data('inited')) {  // has inited already. Don't init again
            return;
        }

        settings = this.data('rateWidgetSettings');
        if (typeof settings.hold !== 'function') {
            settings.hold = _scalarToFunc(settings.hold);
        }
        init.call(this);

        function init() {
            if (!self.attr('id')) {
                self.attr('id', (''+Math.random()).substr(2));
            }
            if (settings.rate !== null) {
                self.attr('data-rate', settings.rate);
            }
            self.find('i:lt(' + self.attr('data-rate') + ')').removeClass('star-empty').addClass('star');
            self.mouseover(function(e) {
                if (settings.hold.call(self)) {
                    return;
                }
                var target = e.target;
                if (target.tagName == 'I') {
                    target = $(target);
                    target.prevAll()
                        .removeClass('star star-empty').addClass('star-hover').end()
                        .removeClass('star star-empty').addClass('star-hover');
                    target.nextAll().removeClass('star star-hover').addClass('star-empty');
                }
            }).mouseleave(function() {
                if (settings.hold.call(self)) {
                    return;
                }
                update.call(self, self.attr('data-rate'));
            });
            self.click(function(e) {
                if (settings.hold.call(self)) {
                    return;
                }
                var item = e.target;
                var root = this;
                while (item.tagName != 'I') {
                    if (item == root) {
                        return;
                    }
                }
                var prev_rate = self.attr('data-rate');
                var rate = 0;
                self.find('i')
                    .removeClass('star star-hover')
                    .addClass('star-empty')
                    .each(function() {
                        rate++;
                        $(this).removeClass('star-empty').addClass('star');
                        if (this == item) {
                            if (prev_rate != rate) {
                                self.attr('data-rate', rate);
                                settings.onUpdate(rate);
                            }
                            return false;
                        }
                });
                return false;
            });
            // if withClearAction is setted to true make available near the stars link-area for clear all stars (set rate to zero)
            if (settings.withClearAction) {
                var clear_link_id = 'clear-' + $(this).attr('id'),
                    clear_link = $('#' + clear_link_id);
                if (!clear_link.length) {
                    self.after('<a href="javascript:void(0);" class="inline-link rate-clear" id="'+clear_link_id+'" style="display:none;"><b><i>'+$_('clear')+'</b></i></a>');
                    clear_link = $('#' + clear_link_id);
                }
                clear_link.click(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    var prev_rate = self.attr('data-rate');
                    update.call(self, 0);
                    if (prev_rate !== 0) {
                        settings.onUpdate(0);
                    }
                });
                var timer_id;
                self.parent().mousemove(function() {
                    if (settings.hold.call(self)) {
                        return;
                    }
                    if (timer_id) {
                        clearTimeout(timer_id);
                    }
                    clear_link.show(0);
                }).mouseleave(function() {
                    timer_id = setTimeout(function() {
                        if (settings.hold.call(self)) {
                            return;
                        }
                        clear_link.hide(0);
                    }, 150);
                });
            }
            this.unbind('clear').bind('clear', function() {
                update.call(self, 0);
            });
            this.data('inited', true);
        }

        function update(new_rate) {
            var rate = 0;
            this.find('i')
                .removeClass('star star-hover')
                .addClass('star-empty').each(function() {
                    if (rate == new_rate) {
                        return false;
                    }
                    rate++;
                    $(this).removeClass('star-empty').addClass('star');
                });
            this.attr('data-rate', new_rate);
        }

        function _scalarToFunc(scalar) {
            return function() {
                return scalar;
            };
        }

        return this;

    };
})(jQuery);;
(function($) {
    $.product_reviews = {

        /**
         * {Jquery object}
         */
        container: null,

        /**
         * {Jquery object}
         */

        sidebar_counter: null,

        /**
         * {Object}
         */
        statuses: {},

        /**
         * {Jquery object}
         * */
        form: null,

        /**
         * Hotkey combinations
         * {Object}
         */
        hotkeys: {
            'alt+enter': {
                ctrl:false, alt:true, shift:false, key:13
            },
            'ctrl+enter': {
                ctrl:true, alt:false, shift:false, key:13
            },
            'ctrl+s': {
                ctrl:true, alt:false, shift:false, key:17
            }
        },

        /**
         * {Object}
         * */
        options: {},

        init: function(options) {
            this.options  = options;
            this.statuses = options.statuses;
            if (options.product_id) {
                this.product_id = options.product_id;
            }
            this.form = $('#s-review-add-form');
            this.sidebar_counter = $('#s-all-reviews').find('.count');
            if (options.container) {
                if (typeof options.container === 'object') {
                    this.container = options.container;
                } else {
                    this.container = $(options.container);
                }
                this.container.find('.s-reviews').off('click', '.s-review-reply, .s-review-delete, .s-review-restore').
                    on('click', '.s-review-reply, .s-review-delete, .s-review-restore',
                        function() {
                            var self = $(this),
                                li = self.parents('li:first'),
                                parent_id = parseInt(li.attr('data-id'), 10) || 0;
                            if (self.hasClass('s-review-reply')) {
                                if ($.product_reviews.options.reply == 'ignore') {
                                    return;
                                }
                                $.product_reviews.prepareAddingForm.call(self, $.product_reviews.form, parent_id);
                            } else if (self.hasClass('s-review-delete')) {
                                $.product_reviews.deleteReview(parent_id, options.afterDelete);
                            } else if (self.hasClass('s-review-restore')) {
                                $.product_reviews.restoreReview(parent_id, options.afterRestore);
                            }
                            return false;
                        }
                    );
            }

            if (this.product_id) {
                this.container.addClass('ajax');
            }

            var addReview = function() {
                $.product_reviews.addReview('backend', options.afterAdd);
            };
            this.addHotkeyHandler('textarea', 'ctrl+enter', addReview);
            this.form.find('input.save').unbind('click').bind('click', addReview);

            this.initView();

//            $.product_reviews.form.find('a:first').rateWidget({
//                onUpdate: function(rate) {
//                    $.product_reviews.form.find('input[name=rate]').val(rate);
//                }
//            });

            if (this.options.lazy_loading) {
                this.initLazyLoad(this.options.lazy_loading);
            }

            if ($.product) {
                $.product.editTabReviewsAction = function(path) {
                    if (path.tail) {
                        setTimeout(function() {
                            $.product_reviews.activeReplyToForm(path.tail);
                        }, 200);
                    }
                };
            }
        },

        activeReplyToForm: function(id) {
            var li = this.container.find('.s-reviews li[data-id='+id+']');
            if (li.length) {
                var reply_link = li.find('.s-review-reply:first');
                this.prepareAddingForm.call(reply_link, this.form, id);
                $(document).scrollTop(li.offset().top);
            }
        },

        initView: function() {
            if ($.products.hash.substr(0, 7) == 'reviews') {
                var sidebar = $('#s-sidebar');
                sidebar.find('li.selected').removeClass('selected');
                sidebar.find('#s-all-reviews').addClass('selected');
            }
        },

        initLazyLoad: function(options) {
            var count = options.count;
            var offset = count;
            var total_count = options.total_count;
            var url = options.url || '?module=reviews';
            var target = $(options.target || '.s-reviews:first ul:first');

            $(window).lazyLoad('stop');  // stop previous lazy-load implementation

            if (offset < total_count) {
                $(window).lazyLoad({
                    container: target,
                    state: (typeof options.auto === 'undefined' ? true: options.auto) ? 'wake' : 'stop',
                    load: function() {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get(
                            url+'&lazy=1&offset='+offset+'&total_count='+total_count,
                            function (html) {
                                var data = $('<div></div>').html(html);
                                var children = data.find('.s-reviews').children();
                                offset += children.length;
                                target.append(children);
                                $('.lazyloading-progress-string').replaceWith(data.find('.lazyloading-progress-string'));
                                $('.lazyloading-progress').replaceWith(data.find('.lazyloading-progress'));
                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-link').hide();
                                } else {
                                    $('.lazyloading-link').show();
                                    $(window).lazyLoad('wake');
                                }
                                data.remove();
                            },
                            "html"
                        );
                    }
                });
                $('.lazyloading-link').unbind('click').bind('click', function(){
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        },

        prepareAddingForm: function(form, review_id)
        {
            var self = this; // clicked link
            if (review_id) {
                self.after(form);
                form.find('.rate a:first').hide();
            } else {
                var acceptor = $('#s-review-add li:first');
                if (!acceptor.find('form').length) {
                    acceptor.append(form);
                }
                form.find('.rate a:first').show();
            }
            $.product_reviews.clear(false);
            $('input[name=parent_id]', form).val(review_id);
        },

        addHotkeyHandler: function(item_selector, hotkey_name, handler) {
            var hotkey = this.hotkeys[hotkey_name];
            this.form.off('keydown', item_selector).on('keydown', item_selector,
                function(e) {
                    if (e.keyCode == hotkey.key &&
                        e.altKey  == hotkey.alt &&
                        e.ctrlKey == hotkey.ctrl &&
                        e.shiftKey == hotkey.shift)
                    {
                        return handler();
                    }
                }
            );
        },

        addReview: function(env, success) {
            var sidebar_counter = this.sidebar_counter;
            $.post(
                (env == 'backend' || !env) ? '?module=reviews&action=add' : '#',
                $.product_reviews.form.serialize(),
                function (r) {
                    if (r.status == 'fail') {
                        $.product_reviews.clear(false);
                        $.product_reviews.showErrors(r.errors);
                        return;
                    }
                    if (r.status != 'ok' || !r.data.html) {
                        if (console) {
                            console.log('Error occured.');
                        }
                        return;
                    }
                    var parent_id_input = $('input[name=parent_id]', $.product_reviews.form);
                    var parent_li = $.product_reviews.form.parents('.s-review:first').parent('li');
                    var html = r.data.html;
                    var ul = $('ul:first', parent_li);
                    var reviews_block = $.product_reviews.container;

                    if (!parent_li.length) {
                        reviews_block.show();
                        ul = $('ul:first', reviews_block).show();
                    }
                    if (!ul.length) {
                        ul = $('<ul class="menu-v with-icon"></ul>');
                        parent_li.append(ul);
                    }
                    ul.append($('<li data-id="'+r.data.id+'" data-parent-id="'+r.data.parent_id+'"></li>').append(html));

                    // back form to 's-review-add' place and clear
                    $('textarea', $.product_reviews.form).val('');
                    var acceptor = $('#s-review-add');
                    if (!acceptor.find('form').length) {
                        acceptor.append($.product_reviews.form);
                        parent_id_input.val(0);
                    }
                    if (sidebar_counter.length) {
                        sidebar_counter.text(parseInt(sidebar_counter.text(), 10) + 1);
                    }
                    if (typeof success === 'function') {
                        success(r);
                    }
                    $.product_reviews.clear();
                },
            'json')
            .error(function(r) {
                if (console) {
                    console.log(r.responseText ? 'Error occured: ' + r.responseText : 'Error occured.');
                }
            });
        },

        deleteReview: function(review_id, success)
        {
            var container = this.container;
            var sidebar_counter = this.sidebar_counter;
            $.post('?module=reviews&action=changeStatus',
                { review_id: review_id, status: this.statuses.deleted },
                function(r) {
                    if (r.status == 'ok') {
                        var review_li  = container.find('li[data-id='+review_id+']');
                        var review_div = review_li.find('div:first');
                        review_div.addClass('s-deleted');
                        review_div.find('.s-review-delete').hide();
                        review_div.find('.s-review-restore').show();
                        if (sidebar_counter.length) {
                            sidebar_counter.text(parseInt(sidebar_counter.text(), 10) - 1);
                        }
                        if (typeof success === 'function') {
                            success(r);
                        }
                    }
                },
            'json');
        },

        restoreReview: function(review_id)
        {
            var container = this.container;
            var sidebar_counter = this.sidebar_counter;
            $.post('?module=reviews&action=changeStatus',
                { review_id: review_id, status: this.statuses.published },
                function(r) {
                    if (r.status == 'ok') {
                        var review_li  = container.find('li[data-id='+review_id+']');
                        var review_div = review_li.find('div:first');
                        review_div.removeClass('s-deleted');
                        review_div.find('.s-review-delete').show();
                        review_div.find('.s-review-restore').hide();
                        if (sidebar_counter.length) {
                            sidebar_counter.text(parseInt(sidebar_counter.text(), 10) + 1);
                        }
                        if (typeof success === 'function') {
                            success();
                        }
                    }
                },
            'json');
        },

        clear: function(clear_inputs) {
            clear_inputs = typeof clear_inputs === 'undefined' ? true : clear_inputs;
            $('.errormsg', this.form).remove();
            $('.error',    this.form).removeClass('error');
            $('.wa-captcha-refresh', this.form).click();
            if (clear_inputs) {
                $('input[name=captcha], textarea', this.form).val('');
                $('input[name=rate]', this.form).val(0);
                $('.rate a:first', this.form).trigger('clear');
            }
        },

        showErrors: function(errors) {
            for (var i = 0, n = errors.length, errs = errors[i]; i < n; errs = errors[++i]) {
                for (var name in errs) {
                    $('[name='+name+']', this.form).
                        after($('<em class="errormsg"></em>').text(errs[name])).
                        addClass('error');
                }
            }
        }
    };
})(jQuery);;
(function($) {
    $.product_images = {

        /**
         * {Number}
         */
        product_id: 0,

        /**
         * {Object}
         */
        image: null,

        /**
         * {Jquery Object}
         */
        product_image: null,

        /**
         * {Jquery Object}
         */
        image_list: null,

        /**
         * {Jquery Object}
         */
        photo_stream: null,

        /**
         * Dispatching tail
         * {String}
         */
        tail: null,

        /**
         * {Object}
         */
        options : {},

        init : function(options) {
            this.options = options;
            this.product_id = options.product_id || 0;
            this.image = options.image || null;
            this.options.placeholder = this.options.placeholder || null;

            var tab = $('#s-product-edit-menu .images');

            if (!this.image) {
                this.initImageList(options);
            } else {
                setTimeout(function() {
                    $.product_images.initImage();
                }, 200);
            }

            tab.find('.hint').text(options.count || (options.images && options.images.length) || 0);
            $('#s-product-edit-forms .s-product-form.images').addClass('ajax');

            $.product.editTabImagesAction = function(path) {
                if ($.product_images.tail !== null) {
                    var url = '?module=product&action=images&id=' + path.id;
                    if (path.tail) {
                        url += '&param[]=' + path.tail;
                        if ($.product_images.photo_stream && $.product_images.photo_stream.length) {
                            var ul = $.product_images.photo_stream.find('.s-stream-wrapper>ul');
                            url += '&ps[left]=' + parseInt(ul.css('left'), 10);
                            url += '&ps[width]=' + parseInt(ul.css('width'), 10);
                        }
                    }

                    $.get(url, function(html) {
                        $('#s-product-edit-forms .s-product-form.images').html(html);
                    });
                }
                $.product_images.tail = path.tail;
            };

            $.product.editTabImagesBlur = function(path) {
                $('#fileupload').fileupload('destroy');
            };
        },

        initImageList: function(options) {
            this.image_list = $(options.image_list || '#s-product-image-list');
            this.image_list.html(tmpl('template-product-image-list', {
                images: options.images,
                placeholder: options.placeholder,
                type: options.type,
                product_id: this.product_id
            }));
            this.initListSortable();
            if (!options.type || options.type == 'thumbs') {
                this.initListEditable();
            }
        },

        initImage: function() {
            var image_div = $('#s-product-one-image');
            var width = image_div.parent().width();
            this.photo_stream = $('#s-product-image-toolbar ul.s-photostream:first');

            var sizes = this.setImageDimensions();
            $(window).unbind('resize.product_images').bind('resize.product_images', function(e) {
                if (!$('#s-product-image').length) {
                    $(this).unbind('resize.product_images');
                }
                var sizes = $.product_images.setImageDimensions();
                $.product_images.loupe.resize(sizes);
            });

            $('#s-product-image-description').inlineEditable({
                inputType: 'textarea',
                makeReadableBy: ['esc'],
                updateBy: ['ctrl+enter'],
                placeholderClass: 'gray',
                placeholder: $.product_images.options.placeholder,
                minSize: {
                    height: 50,
                    widht: 600
                },
                size: {
                    width: sizes.width
                },
                editLink: '#s-product-image-description-edit-link',
                allowEmpty: true,
                beforeMakeEditable: function(input) {
                    var self = $(this);
                    var button_id = this.id + '-button';
                    var button = $('#' + button_id);
                    if (!button.length) {
                        input.after('<br><input type="button" id="' + button_id + '" value="' + $_('Save') + '"> <em class="hint" id="' + this.id + '-hint">Ctrl+Enter</em>');
                        $('#' + button_id).click(function() {
                            self.trigger('readable');
                        });
                    }
                    $('#'+this.id+'-hint').show();
                    button.show().prev('br').hide();
                },
                afterBackReadable: function(input, data) {
                    var value = $(input).val();
                    var prefix = '#'+this.id+'-';

                    $(prefix + 'button').hide().prev('br').hide();
                    $(prefix + 'hint').hide();
                    if (data.changed) {
                        $.products.jsonPost('?module=product&action=imageSave', {
                            id: $.product_images.image.id,
                            data: {
                                description: value
                            }
                        });
                    }
                }
            });

            var photo_stream = this.photo_stream;
            var selected = photo_stream.find('li.selected');

            photo_stream.photoStreamSlider({
                backwardLink:'#s-product-image-toolbar .rewind',
                forwardLink: '#s-product-image-toolbar .ff',
                photoStream: 'ul',
                duration: 400
            });

            photo_stream.off('click', 'li.visible a').on('click', 'li.visible a', function() {
                var self = $(this);
                var href = self.attr('href');
                var li = $(this).parent();
                selected.removeClass('selected');
                selected = li.addClass('selected');
                photo_stream.trigger('home', [function() {
                    location.href = href;
                }]);
                return false;
            });

            this.photo_stream = photo_stream;
            this.product_image = $('#s-product-image');
            var custom_badge = $('#s-product-set-custom-badge');

            $('.s-product-image-actions').off('click', 'li').on('click', 'li', function() {
                var self = $(this);
                var action = self.attr('data-action');
                switch (action) {
                    case 'delete':
                        $.product_images.deleteImage();
                        break;
                    case 'rotate-right':
                        $.product_images.rotateImage('right');
                        break;
                    case 'rotate-left':
                        $.product_images.rotateImage('left');
                        break;
                    case 'set-badge':
                        $.product_images.setBadge(self.attr('data-type'));
                        break;
                    case 'set-custom-badge':
                        custom_badge.data('type', self.attr('data-type'));
                        custom_badge.show();
                        break;
                    case 'delete-badge':
                        $.product_images.deleteBadge();
                        break;
                }
                if (action != 'set-custom-badge') {
                    custom_badge.hide();
                }
                return false;
            });

            custom_badge.find('input[type=button]').unbind('click').bind('click', function() {
                var self = $(this).parent();
                custom_badge.show();
                $.product_images.setBadge(custom_badge.data('type'), self.find('textarea[name=code]').val());
                return false;
            });

            var image = this.image;
            if ($('#s-product-image-loupe').length) {
                $.product_images.loupe.init({
                    original: {
                        width:  image.width,
                        height: image.height,
                        src: '?module=product&action=ImageDownload&id='+image.id
                    },
                    image: {
                        width:  this.product_image.width(),
                        height: this.product_image.height(),
                        src: image.url_big,
                        dom: this.product_image
                    },
                    animate: !!(image.dimensions.width && image.dimensions.height)
                });
            }

            var self = this;
            $('#s-restore-image-original').unbind('click').bind('click', function() {
                if (confirm($_('This will reset all changes you applied to the image after upload, and will restore the image to its original. Are you sure?'))) {
                    self.coverToggle();
                    $.products.jsonPost('?module=product&action=imageRestore', { id: self.image.id },
                        function(r) {
                            $('#s-product-view').find('li[data-image-id=' + self.image.id + '] img').attr('src', r.data.url_crop);
                            $('<img>').attr('src', r.data.url_big).load(
                                function() {
                                    $(this).remove();
                                    $.products.dispatch('#/product/'+self.product_id+'/edit/images/'+self.image.id+'/');
                                    self.coverToggle();
                                }
                            );
                        },
                    'json');
                }
            });

            var hold = false;
            $(document).unbind('keydown.product_images').
                bind('keydown.product_images', function(e) {
                    var target_type = $(e.target).prop('nodeName').toLowerCase();
                    var code = e.keyCode;
                    if (hold || target_type == 'text' || target_type == 'textarea' ||
                            (code != 37 && code != 39))
                    {
                        return  ;
                    }
                    // right
                    if (code == 39) {
                        var next = photo_stream.find('li.selected').next();
                        if (next.length && !next.hasClass('dummy')) {
                            hold = true;
                            location.href = next.find('a').attr('href');
                        }
                        return false;
                    }
                    // left
                    if (code == 37) {
                        var prev = photo_stream.find('li.selected').prev();
                        if (prev.length && !prev.hasClass('dummy')) {
                            hold = true;
                            location.href = prev.find('a').attr('href');
                        }
                        return false;
                    }
                });
        },

        setImageDimensions: function() {
            var image = $('#s-product-image');
            var image_div = $('#s-product-one-image');
            var width = image_div.parent().width();
            var dimensions = this.image.dimensions;
            dimensions.width = parseInt(dimensions.width, 10);
            dimensions.height = parseInt(dimensions.height, 10);

            var sizes = { width: '', height: '' };
            if (!isNaN(dimensions.width) && dimensions.width < width) {
                sizes.width = dimensions.width;
                if (!isNaN(dimensions.height)) {
                    sizes.height = dimensions.height;
                }
            } else {
                sizes.width = width;
            }
            image.css(sizes);
            return sizes;
        },

        deleteImage: function() {
            var self = this;
            var dialog = $('#s-product-image-delete-dialog');
            dialog.waDialog({
                onSubmit: function() {
                    dialog.trigger('close');
                    self.coverToggle();
                    var form = dialog.find('form');
                    $.shop.jsonPost(form.attr('action'), form.serialize(),
                        function(r) {
                            var href = '#/product/'+self.product_id+'/edit/images/';
                            var current = self.photo_stream.find('li.selected');
                            var near = current.next('li:not(.dummy)');
                            if (near.length) {
                                href = near.find('a').attr('href');
                            } else {
                                near = current.prev('li:not(.dummy)');
                                if (near.length) {
                                    href = near.find('a').attr('href');
                                }
                            }
                            $('.s-product-image-crops').find('li[data-image-id='+r.data.id+']').remove();
                            self.coverToggle();
                            location.href = href;
                        }
                    );
                    return false;
                }
            });
        },

        rotateImage: function(direction) {
            var self = this;
            self.coverToggle();
            $.products.jsonPost('?module=product&action=imageRotate&id='+self.image.id, { direction: direction },
                function(r) {
                    $('#s-product-view').find('li[data-image-id=' + self.image.id + '] img').attr('src', r.data.url_crop);
                    $('<img>').attr('src', r.data.url_big).load(
                        function() {
                            $(this).remove();
                            $.products.dispatch('#/product/'+self.product_id+'/edit/images/'+self.image.id+'/');
                            self.coverToggle();
                        }
                    );
                }
            );
        },

        setBadge: function(type, code, fn) {
            var self = this;

            code = code || type;
            $.shop.jsonPost(
                '?module=product&action=badgeSet&id=' + self.product_id,
                { code : code },
                function(r) {
                    $('#s-product-one-image').find('.top.right').html(r.data);
                    var organize_menu = $('#photo-organize-menu');
                    var selected_li = organize_menu.find('li.selected');
                    var li = organize_menu.find('li[data-type='+type+']');
                    selected_li.removeClass('selected').find('.small').text('');
                    li.addClass('selected');

                    if (type != 'custom') {
                        $('#s-product-set-custom-badge').hide();
                        li.find('.small').text(r.data);
                    } else {
                        $('#s-product-set-custom-badge').show();
                    }
                    if (typeof fn === 'function') {
                        fn(r);
                    }
                }
            );
        },

        deleteBadge: function() {
            var self = this;
            $.getJSON('?module=product&action=badgeDelete&id='+self.product_id,
                function(r) {
                    $('#s-product-one-image').find('.top.right').html('');
                    $('#photo-organize-menu').find('li.selected').removeClass('selected');
                }
            );
        },

        initListSortable: function() {
            this.image_list.sortable({
                distance: 5,
                helper: 'clone',
                items: 'li',
                opacity: 0.75,
                tolerance: 'pointer',
                start: function() {
                    document.ondragstart = function() { return false; };
                },
                update: function (event, ui) {
                    document.ondragstart = null;
                    var self = $(this);
                    var li = $(ui.item);
                    var id = parseInt(li.attr('data-image-id'), 10);
                    var next = li.next(), before_id = null;
                    if (next.length) {
                        before_id = parseInt(next.attr('data-image-id'), 10);
                    }
                    $.products.jsonPost('?module=product&action=imageMove', { id: id, before_id: before_id },
                        function(r) {
                            if (typeof $.product_images.options.onSort === 'function') {
                                $.product_images.options.onSort(id, before_id);
                            }
                        },
                        function() {
                            self.sortable('cancel');
                        }
                    );
            }});
        },

        coverToggle: function() {
            var cover = $('#s-product-image-cover');
            if (cover.is(':hidden')) {
                var icon = cover.find('.loading');
                icon.css({
                    position: 'absolute',
                    left: parseInt((cover.width()  - icon.width())  / 2, 10) + 'px',
                    top:  parseInt((cover.height() - icon.height()) / 2, 10) + 'px'
                });
                cover.show();
            } else {
                cover.hide();
            }
        },

        initListEditable: function() {
            this.image_list.off('click', '.editable').on('click', '.editable', function() {
                $(this).inlineEditable({
                    inputType: 'textarea',
                    makeReadableBy: ['esc'],
                    updateBy: ['ctrl+enter'],
                    placeholderClass: 'gray',
                    placeholder: $.product_images.options.placeholder,
                    minSize: {
                        height: 40
                    },
                    allowEmpty: true,
                    beforeMakeEditable: function(input) {
                        var self = $(this);

                        input.css({
                            'font-size': self.css('font-size'),
                            'line-height': self.css('line-height')
                        }).width(
                            self.parents('li:first').find('img').width()
                        );

                        var button_id = this.id + '-button';
                        var button = $('#' + button_id);
                        if (!button.length) {
                            input.after('<br><input type="button" id="' + button_id + '" value="' + $_('Save') + '"> <em class="hint" id="' + this.id + '-hint">Ctrl+Enter</em>');
                            $('#' + button_id).click(function() {
                                self.trigger('readable');
                            });
                        }
                        $('#'+this.id+'-hint').show();
                        button.show();
                    },
                    afterBackReadable: function(input, data) {
                        var self = $(this);
                        var image_id = parseInt(self.parents('li:first').attr('data-image-id'), 10);
                        var value = $(input).val();
                        var prefix = '#'+this.id+'-';

                        $(prefix + 'button').hide();
                        $(prefix + 'hint').hide();
                        if (data.changed) {
                            $.products.jsonPost('?module=product&action=imageSave', {
                                id: image_id,
                                data: {
                                    description: value
                                }
                            });
                        }
                    }
                }).trigger('editable');
            });
        }
    };
})(jQuery);
;
(function(a){var b=new Array;var c=new Array;a.fn.doAutosize=function(b){var c=a(this).data("minwidth"),d=a(this).data("maxwidth"),e="",f=a(this),g=a("#"+a(this).data("tester_id"));if(e===(e=f.val())){return;}var h=e.replace(/&/g,"&").replace(/\s/g," ").replace(/</g,"<").replace(/>/g,">");g.html(h);var i=g.width(),j=i+b.comfortZone>=c?i+b.comfortZone:c,k=f.width(),l=j<k&&j>=c||j>c&&j<d;if(l){f.width(j);}};a.fn.resetAutosize=function(b){var c=a(this).data("minwidth")||b.minInputWidth||a(this).width(),d=a(this).data("maxwidth")||b.maxInputWidth||a(this).closest(".tagsinput").width()-b.inputPadding,f=a(this),g=a("<tester/>").css({position:"absolute",top:-9999,left:-9999,width:"auto",fontSize:f.css("fontSize"),fontFamily:f.css("fontFamily"),fontWeight:f.css("fontWeight"),letterSpacing:f.css("letterSpacing"),whiteSpace:"nowrap"}),h=a(this).attr("id")+"_autosize_tester";if(!a("#"+h).length>0){g.attr("id",h);g.appendTo("body");}f.data("minwidth",c);f.data("maxwidth",d);f.data("tester_id",h);f.css("width",c);};a.fn.addTag=function(d,e){e=jQuery.extend({focus:false,callback:true},e);this.each(function(){var f=a(this).attr("id");var g=a(this).val().split(b[f]);if(g[0]==""){g=new Array;}d=jQuery.trim(d);var h;if(e.unique){h=a(g).tagExist(d);if(h==true){a("#"+f+"_tag").addClass("not_valid");}}else{h=false;}if(d!=""&&h!=true){a("<span>").addClass("tag").append(a("<span>").text(d).append("  "),a("<a>",{href:"#",title:"Removing tag",text:"x"}).click(function(){return a("#"+f).removeTag(escape(d));})).insertBefore("#"+f+"_addTag");g.push(d);a("#"+f+"_tag").val("");if(e.focus){a("#"+f+"_tag").focus();}else{a("#"+f+"_tag").blur();}a.fn.tagsInput.updateTagsField(this,g);if(e.callback&&c[f]&&c[f]["onAddTag"]){var i=c[f]["onAddTag"];i.call(this,d);}if(c[f]&&c[f]["onChange"]){var j=g.length;var i=c[f]["onChange"];i.call(this,a(this),g[j-1]);}}});return false;};a.fn.removeTag=function(d){d=unescape(d);this.each(function(){var e=a(this).attr("id");var f=a(this).val().split(b[e]);a("#"+e+"_tagsinput .tag").remove();str="";for(var i=0;i<f.length;i++){if(f[i]!=d){str=str+b[e]+f[i];}}a.fn.tagsInput.importTags(this,str);if(c[e]&&c[e]["onRemoveTag"]){var g=c[e]["onRemoveTag"];g.call(this,d);}});return false;};a.fn.tagExist=function(b){return jQuery.inArray(b,a(this))>=0;};a.fn.importTags=function(b){id=a(this).attr("id");a("#"+id+"_tagsinput .tag").remove();a.fn.tagsInput.importTags(this,b);};a.fn.tagsInput=function(d){var e=jQuery.extend({interactive:true,defaultText:"add a tag",minChars:0,width:"300px",height:"100px",autocomplete:{selectFirst:false},hide:true,delimiter:",",unique:true,removeWithBackspace:true,placeholderColor:"#666666",autosize:true,comfortZone:20,inputPadding:6*2},d);this.each(function(){if(e.hide){a(this).hide();}var d=a(this).attr("id");var f=jQuery.extend({pid:d,real_input:"#"+d,holder:"#"+d+"_tagsinput",input_wrapper:"#"+d+"_addTag",fake_input:"#"+d+"_tag"},e);b[d]=f.delimiter;if(e.onAddTag||e.onRemoveTag||e.onChange){c[d]=new Array;c[d]["onAddTag"]=e.onAddTag;c[d]["onRemoveTag"]=e.onRemoveTag;c[d]["onChange"]=e.onChange;}var g='<div id="'+d+'_tagsinput" class="tagsinput"><div id="'+d+'_addTag">';if(e.interactive){g=g+'<input id="'+d+'_tag" value="" data-default="'+e.defaultText+'" />';}g=g+'</div><div class="tags_clear"></div></div>';a(g).insertAfter(this);a(f.holder).css("width",e.width);a(f.holder).css("height",e.height);if(a(f.real_input).val()!=""){a.fn.tagsInput.importTags(a(f.real_input),a(f.real_input).val());}if(e.interactive){a(f.fake_input).val(a(f.fake_input).attr("data-default"));a(f.fake_input).css("color",e.placeholderColor);a(f.fake_input).resetAutosize(e);a(f.holder).bind("click",f,function(b){a(b.data.fake_input).focus();});a(f.fake_input).bind("focus",f,function(b){if(a(b.data.fake_input).val()==a(b.data.fake_input).attr("data-default")){a(b.data.fake_input).val("");}a(b.data.fake_input).css("color","#000000");});if(e.autocomplete_url!=undefined){autocomplete_options={source:e.autocomplete_url};for(attrname in e.autocomplete){autocomplete_options[attrname]=e.autocomplete[attrname];}if(jQuery.Autocompleter!==undefined){a(f.fake_input).autocomplete(e.autocomplete_url,e.autocomplete);a(f.fake_input).bind("result",f,function(b,c,f){if(c){a("#"+d).addTag(c[0]+"",{focus:true,unique:e.unique});}});}else if(jQuery.ui.autocomplete!==undefined){a(f.fake_input).autocomplete(autocomplete_options);a(f.fake_input).bind("autocompleteselect",f,function(b,c){a(b.data.real_input).addTag(c.item.value,{focus:true,unique:e.unique});return false;});}}else{a(f.fake_input).bind("blur",f,function(b){var c=a(this).attr("data-default");if(a(b.data.fake_input).val()!=""&&a(b.data.fake_input).val()!=c){if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}}else{a(b.data.fake_input).val(a(b.data.fake_input).attr("data-default"));a(b.data.fake_input).css("color",e.placeholderColor);}return false;});}a(f.fake_input).bind("keypress",f,function(b){if(b.which==b.data.delimiter.charCodeAt(0)||b.which==13){b.preventDefault();if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}a(b.data.fake_input).resetAutosize(e);return false;}else if(b.data.autosize){a(b.data.fake_input).doAutosize(e);}});f.removeWithBackspace&&a(f.fake_input).bind("keydown",function(b){if(b.keyCode==8&&a(this).val()==""){b.preventDefault();var c=a(this).closest(".tagsinput").find(".tag:last").text();var d=a(this).attr("id").replace(/_tag$/,"");c=c.replace(/[\s]+x$/,"");a("#"+d).removeTag(escape(c));a(this).trigger("focus");}});a(f.fake_input).blur();if(f.unique){a(f.fake_input).keydown(function(b){if(b.keyCode==8||String.fromCharCode(b.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,\/]+/)){a(this).removeClass("not_valid");}});}}return false;});return this;};a.fn.tagsInput.updateTagsField=function(c,d){var e=a(c).attr("id");a(c).val(d.join(b[e]));};a.fn.tagsInput.importTags=function(d,e){a(d).val("");var f=a(d).attr("id");var g=e.split(b[f]);for(var i=0;i<g.length;i++){a(d).addTag(g[i],{focus:false,callback:false});}if(c[f]&&c[f]["onChange"]){var h=c[f]["onChange"];h.call(d,d,g[i]);}};})(jQuery);;
(function($) {
    $.product_list = {
        /**
         * {Object}
         */
        options: {},

        /**
         * {Array} Hash of list(collection)
         */
        collection_hash: [],

        /**
         * {String} Param in url for specification list(collection)
         */
        collection_param: '',

        /**
         * {Number}
         */
        total_count: 0,

        /**
         * {String|null} Sorting of list (name, rate, datetime, etc.)
         */
        sort: null,

        /**
         * {String|null} Ordering or sorting (asc, desc)
         */
        order: null,

        /**
         * {Object|null} Jquery object related to list container
         */
        container: null,

        /**
         * {Object|null} Jquery object related to right toolbar
         */
        toolbar: null,

        /**
         * {Boolean}
         */
        sortable: true,

        init: function(options) {
            try {
                this.options = options;
                this.container = $('#product-list');
                this.toolbar = $('#s-product-list-toolbar');
                this.sidebar = $('#s-sidebar');
                var products = this.options.products;
                delete this.options.products;
                this.total_count = this.options.total_count || 0;
                this.sortable = typeof options.sortable === 'undefined' ? this.sortable : options.sortable;

                this.sort = options.sort || null;

                if (products && options.view) {
                    try {
                        this.container.append(tmpl('template-product-list-' + this.options.view, {
                            products: products,
                            sort: this.sort
                        }, this.options.view == 'table'));
                    } catch (e) {
                        console.log('Error: ' + e.message);
                        return this;
                    }
                    delete options.products;
                }

                if ($.isArray(this.options.collection_hash) && this.options.collection_hash.length) {
                    this.collection_hash = this.options.collection_hash;
                } else {
                    this.collection_hash = [];
                }

                if (this.options.collection_param) {
                    this.collection_param = this.options.collection_param;
                } else {
                    this.collection_param = '';
                }

                if (options.order) {
                    this.order = options.order;
                }
                if (this.options.lazy_loading) {
                    this.initLazyLoad(this.options.lazy_loading);
                }

                this.initSelecting();
                this.initView(this.options.view);
                this.initDragndrop();
            } catch (e) {
                $.shop.error('$.product_list.init error: ' + e.message, e);
            }

            return this;
        },

        initLazyLoad: function(options) {
            var count = options.count;
            var offset = count;
            var total_count = this.total_count;

            $(window).lazyLoad('stop'); // stop previous lazy-load implementation

            if (offset < total_count) {
                var self = this;
                $(window).lazyLoad({
                    container: self.container,
                    state: (typeof options.auto === 'undefined' ? true : options.auto) ? 'wake' : 'stop',
                    hash: ['', 'products'], // ['products']
                    load: function() {
                        $(window).lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        $.get('?module=products&action=loadList&offset=' + offset + ('&total_count=' + total_count)
                        + (self.collection_param ? '&' + self.collection_param : '') + (self.sort ? '&sort=' + self.sort : '')
                        + (self.order ? '&order=' + self.order : ''), function(r) {
                            if (r.status == 'ok' && r.data.count) {
                                offset += r.data.count;

                                var product_list = self.container;
                                try {
                                    self.container.append(tmpl('template-product-list-' + self.options.view, {
                                        products: r.data.products,
                                        check_all: self.options.view == 'table' ? product_list.find('.s-select-all').attr('checked') : false,
                                        sort: $.product_list.sort
                                    }));
                                } catch (e) {
                                    console.log('Error: ' + e.message);
                                    $(window).lazyLoad('stop');
                                    return;
                                }

                                product_list.find('.last').removeClass('last');
                                product_list.find('.product:last').addClass('last');
                                $('.lazyloading-progress-string').text(r.data.progress.loaded + ' ' + r.data.progress.of);

                                $('.lazyloading-progress').hide();
                                $('.lazyloading-chunk').text(r.data.progress.chunk);

                                if (offset >= total_count) {
                                    $(window).lazyLoad('stop');
                                    $('.lazyloading-link').hide();
                                } else {
                                    $('.lazyloading-link').show();
                                    $(window).lazyLoad('wake');
                                }
                            } else if (r.data && !r.data.count) {
                                if (console) {
                                    console.log('Count of again loaded products is 0');
                                    $('.lazyloading-progress').hide();
                                }
                            } else {
                                if (r.errors && console) {
                                    console.log('Error when loading products: ' + r.errors);
                                }
                                $(window).lazyLoad('stop');
                            }
                        }, "json");
                    }
                });
                $('.lazyloading-link').die('click').live('click', function() {
                    $(window).lazyLoad('force');
                    return false;
                });
            }
        },

        initSelecting: function() {
            var product_list = this.container;
            var toolbar = this.toolbar;
            var toolbar_count = toolbar.find('.count');
            var select_all_input = product_list.find('.s-select-all');
            var recount = function() {
                var count = parseInt(product_list.find('.product.selected').length, 10);
                if (count) {
                    toolbar_count.text(count).show();
                } else {
                    toolbar_count.text('').hide();
                }
            };

            // when 'shift' held on prevent default browser selecting
            $(document).keydown(function(e) {
                if (e.keyCode == 16) {
                    document.body.onselectstart = function() {
                        return false;
                    };
                }
            }).keyup(function(e) {
                if (e.keyCode == 16) {
                    document.body.onselectstart = null;
                }
            });

            // handler of triggerable 'select' event
            product_list.off('select', '.product').on('select', '.product', function(e, selected, need_count) {
                selected = selected !== undefined ? selected : true;
                need_count = need_count !== undefined ? need : true;
                if (selected) {
                    $(this).addClass('selected').find('input:first').attr('checked', true);
                } else {
                    $(this).removeClass('selected').find('input:first').attr('checked', false);
                    if (select_all_input.is(':checked')) {
                        select_all_input.attr('checked', false);
                    }
                }
                if (need_count) {
                    recount();
                }
                return false;
            });

            select_all_input.unbind('select').bind('select', function(e, selected) {
                selected = selected !== undefined ? selected : true;
                var self = $(this);
                if (selected) {
                    self.attr('checked', true);
                    product_list.find('.product').trigger('select', true, false);
                    toolbar_count.text(self.attr('data-count')).show();
                } else {
                    self.attr('checked', false);
                    product_list.find('.product').trigger('select', false, false);
                    toolbar_count.text('').hide();
                }
            });

            product_list.off('click', '.product input').on('click', '.product input', function(e, ext) {
                var shiftKey = e.shiftKey, checked = this.checked;
                if (ext) {
                    shiftKey = ext.shiftKey;
                    checked = ext.checked;
                }
                var self = $(this).parents('.product:first');
                if (checked) {
                    self.addClass('selected');
                } else {
                    if (select_all_input.is(':checked')) {
                        select_all_input.attr('checked', false);
                    }
                    self.removeClass('selected');
                }

                if (shiftKey && checked) { // when hold shift
                    // look before current
                    var started = product_list.data('last_checked');
                    if (!started) {
                        started = product_list.find('.product:first').trigger('select', true);
                    }

                    // try find started before current
                    var found = self.prevAll('.selected[data-product-id=' + started.attr('data-product-id') + ']');
                    var li;
                    if (found.length) {
                        li = self.prev();
                        started = started.get(0);
                        while (li.length && started != li.get(0)) {
                            li.addClass('selected').find('input').attr('checked', true);
                            li = li.prev();
                        }
                    } else {
                        found = self.nextAll('.selected[data-product-id=' + started.attr('data-product-id') + ']');
                        if (found.length) {
                            li = self.next();
                            started = started.get(0);
                            while (li.length && started != li.get(0)) {
                                li.addClass('selected').find('input').attr('checked', true);
                                li = li.next();
                            }
                        }
                    }
                    if (!product_list.data('last_checked') && !found.length) {
                        started.trigger('selected', false);
                    }
                }
                if (checked) {
                    product_list.data('last_checked', self);
                }
                recount();
            });

            // when select product by hand (see below). Firefox version
            // In Firefox shift+click on label don't delegate to corresponding input
            if ($.browser.mozilla) {
                product_list.off('click', '.product label').on('click', '.product label', function(e) {
                    if (!e.shiftKey) {
                        return;
                    }
                    var item = $(e.target), input;
                    if (!$(item).is('label')) {
                        item = $(item).parents('label:first');
                    }
                    input = $('#' + item.attr('for'));
                    input.trigger('click', {
                        shiftKey: e.shiftKey,
                        checked: !input.attr('checked')
                    });
                });
            }
        },

        initView: function(view) {
            try {
                var product_list = this.container;
                var sidebar = this.sidebar;
                if (view == 'table') {
                    product_list.find('.s-select-all').click(function() {
                        $(this).trigger('select', this.checked);
                    });
                }

                // var param = 'view=' + view + (this.sort ? '&sort=' + this.sort : '');
                var param = 'view=' + view;
                sidebar.find('.s-collection-list li.dr').each(function() {
                    var self = $(this);
                    self.find('a:first').attr('href', '#/products/' + self.attr('id').replace('-', '_id=') + '&' + param);
                });
                $('#s-products-search').val(this.options.text || '');

                var li_id = $.product_list.collection_hash.join('-') || 's-all-products';
                $.shop.trace('$.product_list.initView', [view, li_id]);
                sidebar.find('li.selected').removeClass('selected');

                var active_element = sidebar.find('#' + li_id);
                if (active_element.length <= 0 && window.location.hash) {
                    active_element = sidebar.find('a[href="' + window.location.hash + '"]').parent();
                }
                if (active_element.length <= 0) {
                    active_element = sidebar.find('#s-all-products');
                }
                active_element.addClass('selected').find('.count:first').text(this.total_count);

                sidebar.off('click', '.s-new-list').on('click', '.s-new-list', function() {
                    var self = $(this);
                    var id = self.attr('id');
                    var parent_id = 0;
                    var type;
                    if (id) {
                        type = id.replace('s-new-', '');
                    } else {
                        var splited = self.parents('li.dr:first').attr('id').split('-');
                        type = splited[0];
                        parent_id = splited[1];
                    }
                    $.product_list.createListDialog(type, parent_id, function(new_item, type) {
                        var list = $('#s-' + type + '-list').find('ul:first');
                        var parent_id = parseInt(new_item.parent_id, 10) || 0;
                        if (parent_id) {
                            var parent = list.find('#' + type + '-' + new_item.parent_id);
                            if (!parent.find('li.dr').length) {
                                parent.append('<ul class="menu-v with-icons dr"><li class="drag-newposition" data-type="' + type + '"></li></ul>');
                                parent.find('.drag-newposition').mouseover(); // init droppable
                                parent.find('>a').before('<i class="icon16 darr overhanging collapse-handler"></i>');
                            }
                            list = parent.find('ul:first');
                        }
                        list.trigger('add', [new_item, type]);
                    });
                    return false;
                });

                $('#s-content').find('.sort').unbind('click').bind('click', function() {
                    location.href = $(this).find('a').attr('href');
                    return false;
                });

                var embed_code_area = $('#s-embed-code');
                if (embed_code_area.length) {
                    embed_code_area.inlineEditable({
                        size: {
                            width: embed_code_area.width() + 4
                        },
                        afterMakeEditable: function(input) {
                            input.trigger('select');
                        }
                    });
                }

                this.initEditingControls();
                this.initToolbar();
            } catch (e) {
                $.shop.error('$.product_list.initView error: ' + e.message, e);
            }
        },

        initEditingControls: function() {
            var list_title = $('#s-product-list-title');
            if (list_title.hasClass('editable')) {
                list_title.inlineEditable({
                    minSize: {
                        width: 350
                    },
                    maxSize: {
                        width: 600
                    },
                    size: {
                        height: 30
                    },
                    inputClass: 's-title-h1-edit',
                    beforeMakeEditable: function() {
                        $('.s-product-list-manage').hide();
                    },
                    afterBackReadable: function(input, data) {
                        $('.s-product-list-manage').show();
                        if (!data.changed) {
                            return false;
                        }
                        $.shop.jsonPost('?module=products&action=saveListSettings&' + $.product_list.collection_param + '&edit=name', {
                            name: $(input).val()
                        }, function(r) {
                            $.product_list.sidebar.find('#' + $.product_list.collection_hash[0] + '-' + r.data.id).find('.name:first').html(r.data.name);
                        });
                    }
                });
                if (this.options.edit == 'name') {
                    list_title.trigger('editable');
                }
            }

            var type = $.product_list.collection_hash[0];

            // category settings
            var list_settings_link = $('#s-product-list-settings');
            if (list_settings_link.length && (type == 'category' || type == 'set')) {
                list_settings_link.unbind('click').bind('click', function() {
                    var showDialog = function() {

                        // remove conflict dialog
                        var conflict_dialog = $('#s-product-list-create-dialog');
                        if (conflict_dialog.length) {
                            conflict_dialog.parent().remove();
                            conflict_dialog.remove();
                        }

                        $('#s-product-list-settings-dialog').waDialog({
                            onLoad: function() {
                                if ($('#s-category-description-content').length) {
                                    $.product_list.initCategoryDescriptionWysiwyg($(this));
                                }
                            },
                            onSubmit: function(d) {
                                var form = $(this);

                                if ($('#s-category-description-content').length) {
                                    waEditorUpdateSource({
                                        id: 's-category-description-content'
                                    });
                                }

                                $.shop.jsonPost(form.attr('action'), form.serializeArray(), function(r) {
                                    var collection_hash = $.product_list.collection_hash;
                                    var hash = location.hash.replace(collection_hash[0] + '_id=' + collection_hash[1], collection_hash[0] + '_id=' + r.data.id);
                                    var li = $('#' + collection_hash.join('-'));
                                    li.find('.name:first').html(r.data.name);
                                    if (r.data.status == '0') {
                                        li.children('a').addClass('gray');
                                    } else if (r.data.status == '1') {
                                        li.children('a').removeClass('gray');
                                    }
                                    li.find('.id:first').html(r.data.id);
                                    li.attr('id', collection_hash[0] + '-' + r.data.id);
                                    li.find('a').attr('href', hash);

                                    if (location.hash != hash) {
                                        location.hash = hash;
                                    } else {
                                        $.products.dispatch();
                                    }
                                    d.trigger('close');

                                }, function(r) {
                                    if (r && r.errors) {
                                        var errors = r.errors;
                                        for (var name in errors) {
                                            d.find('input[name=' + name + ']').addClass('error').parent().find('.errormsg').text(errors[name]);
                                        }
                                        return false;
                                    }
                                });
                                return false;
                            }
                        });
                    };
                    var d = $('#s-product-list-settings-dialog');
                    if (!d.length) {
                        p = $('<div></div>').appendTo('body');
                    } else {
                        p = d.parent();
                    }
                    p.load('?module=dialog&action=productListSettings&' + $.product_list.collection_param, showDialog);
                    return false;
                });
            }

            var list_delete_link = $('#s-product-list-delete');
            if (list_delete_link.length && (type == 'category' || type == 'set')) {
                list_delete_link.unbind('click').bind('click', function() {
                    var d = $("#s-product-list-delete-dialog");
                    d.waDialog({
                        disableButtonsOnSubmit: true,
                        onLoad: function() {
                            $(this).find('.dialog-buttons i.loading').hide();
                        },
                        onSubmit: function() {
                            var self = $(this);
                            self.find('.dialog-buttons i.loading').show();
                            var params = {
                                hash: $.product_list.collection_hash.join('/') || 'all',
                                remove: ['list']
                            };
                            if (self.find('input[name=s-delete-products]:checked').val() == '1') {
                                params.remove.push('products');
                            }
                            $.product_list.remove(params, function(r) {
                                var li = $('#' + $.product_list.collection_hash.join('-'));
                                var sep = li.prev('.drag-newposition');
                                var tree = $('#s-' + $.product_list.collection_hash[0] + '-list');
                                var tree_ul = tree.find('ul');
                                var ul;

                                if (type == 'set') {
                                    li.remove();
                                    sep.remove();
                                } else {
                                    ul = li.find('ul:first');
                                    if (ul.length) { // curent item has children
                                        ul.find('>li.drag-newposition:first').remove();
                                        li.hide();
                                        ul.find('>li').each(function() {
                                            li.after(this);
                                        });
                                    }
                                    ul = li.parents('ul:first'); // now going to check parent
                                    li.remove();
                                    sep.remove();
                                    if (!ul.find('li.dr').length) {
                                        if (tree_ul.get(0) != ul.get(0)) {
                                            ul.parents('li:first').find('i.collapse-handler').remove();
                                            ul.remove();
                                        }
                                    }
                                }

                                // if tree list is empty - hide it
                                if (!tree_ul.find('li.dr:first').length) {
                                    tree_ul.hide();
                                    tree.find('.s-empty-list').show();
                                } else {
                                    tree_ul.show();
                                    tree.find('.s-empty-list').hide();
                                }

                                // update counters
                                $.product_list.sidebar.trigger('update', r.data.lists);
                                location.href = '#/';
                            });
                            return false;
                        }
                    });
                    return false;
                });
            }
        },

        initCategoryDescriptionWysiwyg: function(d) {

            var tries = 3;

            var request = function(src) {
                return $.ajax({
                    url: src,
                    dataType: 'script',
                    cache: true
                });
            };
            var done = function() {
                var field = d.find('.field.description');
                field.find('i').hide();
                field.find('.s-editor-core-wrapper').show();
                waEditorInit({
                    id: 's-category-description-content',
                    prefix: 's-category-description-',
                    upload_url: "",
                    lang: "{$lang}"
                });
            };
            var fail = function() {
                if (tries > 0) {
                    if (console) {
                        console.log("Coudn't init editor. Error when loading proper js files. Try again.");
                    }
                    load();
                    tries -= 1;
                } else {
                    if (console) {
                        console.error("Coudn't init editor. Error when loading proper js files");
                    }
                }
            };

            if (wa_lang != 'en') {
                var load = function() {
                    $.when(request(wa_url + 'wa-content/js/elrte/elrte.min.js'), request(wa_url + 'wa-content/js/elrte/elrte-wa.js'),
                    request(wa_url + 'wa-content/js/elrte/i18n/elrte.' + wa_lang + '.js')).then(done, fail);
                };
                load();
            } else {
                var load = function() {
                    $.when(request(wa_url + 'wa-content/js/elrte/elrte.min.js'), request(wa_url + 'wa-content/js/elrte/elrte-wa.js')).then(done, fail);
                };
                load();
            }

            // var requests = [
            // load(wa_url + 'wa-content/js/elrte/elrte.min.js'),
            // load(wa_url + 'wa-content/js/elrte/elrte-wa.js')
            // ];
            // if (wa_lang != 'en') {
            // requests.push(
            // load(wa_url + 'wa-content/js/elrte/i18n/elrte.' + wa_lang + '.js')
            // );
            // }
        },

        initDragndrop: function() {
            $.product_dragndrop.init({
                products: true,
                view: this.options.view
            }).bind('move_product', function(options) {
                $.shop.jsonPost('?module=product&action=move&' + $.product_list.collection_param, {
                    product_ids: options.product_ids,
                    before_id: options.before_id || null
                }, options.success, options.error);
            }).bind('is_product_sortable', function() {
                return $.product_list.sortable;
            }).bind('add_to_list', function(options) {
                var data = {};
                if (options.whole_list) {
                    data.hash = $.product_list.collection_hash.join('/') || 'all';
                } else {
                    data.product_id = options.product_ids;
                }
                $.shop.jsonPost('?module=product&action=addToList&' + options.collection_param, data, options.success, options.error);
            });
        },

        initToolbar: function() {
            var toolbar = this.toolbar;
            toolbar.find('li').unbind('click.product_list').bind('click.product_list', function() {
                var action = $(this).attr('data-action');
                if (!action) {
                    return;
                }
                var products = $.product_list.getSelectedProducts(action != 'delete');
                if (!products.count) {
                    alert($_('Please select at least one product'));
                    return false;
                }
                if (action == 'new-set') {
                    /*
                     * $.shop.jsonPost('?module=products&action=saveListSettings&set_id=0&parent_id=0', products.serialized.concat({ name : 'name', value : 'New
                     * set' }), function(r) { var url = '#/products/set_id=' + r.data.id + '&view=' + $.product_list.options.view; $('#s-set-list
                     * ul:first').trigger('add', [r.data, 'set', url]); location.href = url + '&edit=name'; });
                     */
                } else if (action == 'category') {
                    $.product_list.categoriesDialog(products);
                } else if (action == 'set') {
                    $.product_list.setsDialog(products);
                } else if (action == 'type') {
                    $.product_list.typesDialog(products);
                } else if (action == 'assign-tags') {
                    $.product_list.assignTagsDialog(products);
                } else if (action == 'delete') {
                    $.product_list.deleteProductsDialog(products);
                } else if (action == 'delete-from-set' && $.product_list.collection_hash[0] == 'set') {
                    $.product_list.deleteFromSet(products);
                } else if (action == 'delete-from-category' && $.product_list.collection_hash[0] == 'category') {
                    $.product_list.deleteFromCategory(products);
                } else if (action == 'export') {
                    $.product_list.exportProducts(products, $(this).attr('data-plugin'));
                } else if (action == 'copy') {
                    $.product_list.copyProducts(products);
                }
                return false;
            });
            var menu_height = $('#mainmenu').height();
            var toolbar_top = toolbar.find(':first').offset().top - menu_height;
            $(document).bind('scroll', function() {
                if ($(this).scrollTop() > toolbar_top) {
                    toolbar.addClass('s-fixed').css({
                        top: menu_height
                    });
                } else {
                    toolbar.removeClass('s-fixed');
                }
            });
        },

        /**
         * Get special key-value object for mass operations (delete, delete-from-set and etc) Taking into account all-products checkbox (s-select-all)
         *
         * Object say how many products are selected (key 'count'), and info about products or hash If all-products checkbox is activated than object has hash
         * info, else object has products info
         *
         * @param {Boolean} serialize If true than hash/product info packed into field with key 'serialized' else hash info corresponds 'hash'-key and products
         *        info corresponds 'products'-key
         * @returns {Object}
         */
        getSelectedProducts: function(serialize) {
            serialize = serialize || false;
            var product_list = this.container;
            var data = {
                count: 0
            };
            if (product_list.find('.s-select-all').attr('checked')) {
                var hash = $.product_list.collection_hash.join('/') || 'all';
                if (serialize) {
                    data.serialized = [{
                                name: 'hash',
                                value: hash
                            }];
                } else {
                    data.hash = hash;
                }
                data.count = this.total_count;
            } else {
                if (serialize) {
                    data.serialized = $.product_list.container.find('.product.selected').map(function() {
                        data.count += 1;
                        return {
                            name: 'product_id[]',
                            value: $(this).attr('data-product-id')
                        };
                    }).toArray();
                } else {
                    data.product_id = $.product_list.container.find('.product.selected').map(function() {
                        data.count += 1;
                        return $(this).attr('data-product-id');
                    }).toArray();
                }
            }
            return data;
        },

        categoriesDialog: function(products) {
            var d = $('#s-categories');
            var sidebar = this.sidebar;
            var product_list = this.container;
            var showDialog = function() {
                $('#s-categories').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function() {
                        var self = $(this);
                        self.find('.dialog-content h1 span').text('(' + products.count + ')').show();
                        self.find('.dialog-buttons i.loading').hide();
                        self.find('input[name=new_category_name]').val('');
                        self.find('input[name=new_category]').attr('checked', false);
                    },
                    onSubmit: function(d) {
                        // addToCategories
                        var form = d.find('form');
                        form.find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function(r) {

                            // add new category to sidebar
                            if (r.data.new_category) {
                                $('#s-category-list ul:first').trigger('add',
                                [r.data.new_category, 'category', '#/products/category_id=' + r.data.new_category + '&view=' + $.product_list.options.view]);
                            }

                            // update cagegories in sidebar
                            if (r.data.categories) {
                                sidebar.trigger('update', [{
                                            category: r.data.categories
                                        }]);
                                product_list.find('.s-select-all:first').trigger('select', false);
                            }
                            form.find('input:checked').attr('checked', false);
                            d.trigger('close');
                        });
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.parent().remove();
            }

            var p = $('<div></div>').appendTo('body');
            p.load('?module=dialog&action=categories', showDialog);
        },

        setsDialog: function(products) {
            var d = $('#s-sets');
            var sidebar = this.sidebar;
            var product_list = this.container;
            var showDialog = function() {
                $('#s-sets').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function() {
                        var self = $(this);
                        self.find('.dialog-content h1 span').text('(' + products.count + ')').show();
                        self.find('.dialog-buttons i.loading').hide();
                        self.find('input[name=new_set_name]').val('');
                        self.find('input[name=new_set]').attr('checked', false);
                    },
                    onSubmit: function(d) {
                        // addToSets
                        var form = d.find('form');
                        form.find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function(r) {

                            // add new category to sidebar
                            if (r.data.new_set) {
                                $('#s-set-list ul:first').trigger('add',
                                [r.data.new_set, 'set', '#/products/set_id=' + r.data.new_set + '&view=' + $.product_list.options.view]);
                            }

                            // update cagegories in sidebar
                            if (r.data.sets) {
                                sidebar.trigger('update', [{
                                            set: r.data.sets
                                        }]);
                                product_list.find('.s-select-all:first').trigger('select', false);
                            }
                            form.find('input:checked').attr('checked', false);
                            d.trigger('close');
                        });
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.parent().remove();
            }

            var p = $('<div></div>').appendTo('body');
            p.load('?module=dialog&action=sets', showDialog);
        },

        assignTagsDialog: function(products) {
            var d = $('#s-assign-tags');
            var showDialog = function() {
                $('#s-assign-tags').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function() {
                        var self = $(this);
                        self.find('.dialog-content h1 span').text('(' + products.count + ')').show();
                        self.find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function(d) {
                        var form = $(this);
                        form.find('.dialog-buttons i.loading').show();
                        // assignTags
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function(r) {
                            if (r.data.cloud) {
                                $('#s-tag-cloud').trigger('update', [r.data.cloud]);
                            }
                            d.trigger('close');
                            $.products.dispatch();
                        }, function() {
                            d.trigger('close');
                        });
                        return false;
                    }
                });
            };

            // no cache dialog
            if (d.length) {
                d.remove();
            }

            // use post-method instead of get-method because of potential long list of product ids
            $.post('?module=dialog&action=assignTags', products.serialized, function(html) {
                $('body').append(html);
                showDialog();
            });
        },

        typesDialog: function(products) {
            var d = $('#s-types');
            var product_list = this.container;
            var sidebar = this.sidebar;
            var showDialog = function() {
                $('#s-types').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function() {
                        $(this).find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function(d) {
                        var form = $(this);
                        form.find('.dialog-buttons i.loading').show();
                        $.shop.jsonPost(form.attr('action'), form.serializeArray().concat(products.serialized), function(r) {
                            sidebar.trigger('update', {
                                type: r.data.types
                            });
                            product_list.find('.s-select-all:first').trigger('select', false);
                            form.find('input:checked').attr('checked', false);
                            d.trigger('close');
                            $.products.dispatch();
                        });
                        return false;
                    }
                });
            };
            var p = d.parent();
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
                p.load('?module=dialog&action=types', showDialog);
            } else {
                showDialog();
            }
        },

        deleteFromSet: function(products) {
            if (products.count > 0) {
                $.shop.jsonPost('?module=products&action=deleteFromSet&id=' + this.collection_hash[1], products.serialized, function() {
                    $.products.dispatch();
                });
            }
        },

        deleteFromCategory: function(products) {
            if (products.count > 0) {
                $.shop.jsonPost('?module=products&action=deleteFromCategory&id=' + this.collection_hash[1], products.serialized, function() {
                    $.products.dispatch();
                });
            }
        },

        deleteProductsDialog: function(products) {
            var showDialog = function() {
                $('#s-product-list-delete-products-dialog').waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function() {
                        $(this).find('.dialog-buttons i.loading').hide();
                    },
                    onSubmit: function(d) {
                        $(this).find('.dialog-buttons i.loading').show();
                        $.product_list.remove($.extend(products, {
                            remove: ['products']
                        }), function(r) {
                            $.product_list.sidebar.trigger('update', r.data.lists);
                            $.products.dispatch();
                            d.trigger('close');
                        });
                        return false;
                    }
                });
            };
            var d = $('#s-product-list-delete-products-dialog');
            var p = d.parent();
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
            }
            p.load('?module=dialog&action=productsDelete&count=' + products.count, showDialog);
        },
        
        createListDialog: function(type, parent_id, onCreate) {
            var showDialog = function() {

                // remove conflict dialog
                var conflict_dialog = $('#s-product-list-settings-dialog');
                if (conflict_dialog.length) {
                    conflict_dialog.parent().remove();
                    conflict_dialog.remove();
                }

                $('#s-product-list-create-dialog').waDialog({
                    onLoad: function(d) {
                        if ($('#s-category-description-content').length) {
                            $.product_list.initCategoryDescriptionWysiwyg($(this));
                        }
                    },
                    onSubmit: function(d) {
                        var form = $(this);

                        if ($('#s-category-description-content').length) {
                            waEditorUpdateSource({
                                id: 's-category-description-content'
                            });
                        }

                        $.shop.jsonPost(form.attr('action'), form.serializeArray(), function(r) {
                            if (typeof onCreate === 'function') {
                                onCreate(r.data, type);
                            }
                            location.href = '#/products/' + type + '_id=' + r.data.id + '&view=' + $.product_list.options.view;
                            d.trigger('close');
                        }, function(r) {
                            if (r && r.errors) {
                                var errors = r.errors;
                                for (var name in errors) {
                                    d.find('input[name=' + name + ']').addClass('error').parent().find('.errormsg').text(errors[name]);
                                }
                                return false;
                            }
                        });
                        return false;
                    }
                });
            };
            var d = $('#s-product-list-create-dialog');
            if (!d.length) {
                p = $('<div></div>').appendTo('body');
            } else {
                p = d.parent();
            }
            p.load('?module=dialog&action=productListCreate&type=' + type + '&parent_id=' + parent_id, showDialog);
        },

        exportProducts: function(products, plugin) {
            var ids = [];
            var product;
            var hash = false;
            while (product = products.serialized.pop()) {
                if (product.name) {
                    if (product.name == 'product_id[]') {
                        ids.push(parseInt(product.value, 10));
                    } else if (product.name == 'hash') {
                        hash = product.value;
                    }
                }
            }
            var url = '?action=importexport#/';
            url += plugin;
            if (hash) {
                url += '/hash/' + hash;
                window.location = url;
            } else if (ids.length) {
                url += '/hash/id/' + ids.join(',');
                window.location = url;
            }
        },

        remove: function(options, finish) {
            var count = 100;
            var params = {};
            var url = '?module=products&action=deleteList';
            var process;
            if (options.product_id) {
                process = function() {
                    if (options.product_id.length <= count) {
                        params.get_lists = true;
                    }
                    params.product_id = options.product_id.splice(0, count);
                    $.shop.jsonPost(url, params, function(r) {
                        if (options.product_id.length) {
                            process();
                        } else if (typeof finish === 'function') {
                            finish(r);
                        }
                    });
                };
            } else {
                params.hash = options.hash || (this.collection_hash.join('/') || 'all');
                params.remove = $.isArray(options.remove) && options.remove.length ? options.remove : ['list'];
                if (params.remove.length == 1 && params.remove[0] == 'list') {
                    process = function() {
                        $.shop.jsonPost(url, params, finish);
                    };
                } else {
                    params.count = count;
                    var rest_count = null; // previous rest count
                    process = function() {
                        $.shop.jsonPost(url, params, function(r) {
                            if (r.data.rest_count > 0 && rest_count != r.data.rest_count) {
                                process();
                            } else if (typeof finish === 'function') {
                                finish(r);
                            }
                        });
                    };
                }
            }

            process();

        }
    };
})(jQuery);;
